// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Buddy.proto

#ifndef PROTOBUF_IM_2eBuddy_2eproto__INCLUDED
#define PROTOBUF_IM_2eBuddy_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "IM.BaseDefine.pb.h"
// @@protoc_insertion_point(includes)

namespace IM {
namespace Buddy {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_IM_2eBuddy_2eproto();
void protobuf_AssignDesc_IM_2eBuddy_2eproto();
void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

class IMRecentContactSessionReq;
class IMRecentContactSessionRsp;
class IMUserStatNotify;
class IMUsersInfoReq;
class IMUsersInfoRsp;
class IMRemoveSessionReq;
class IMRemoveSessionRsp;
class IMAllUserReq;
class IMAllUserRsp;
class IMUsersStatReq;
class IMUsersStatRsp;
class IMChangeAvatarReq;
class IMChangeAvatarRsp;
class IMPCLoginStatusNotify;
class IMRemoveSessionNotify;
class IMDepartmentReq;
class IMDepartmentRsp;
class IMAddFriendReq;
class IMAddFriendRes;
class IMReverseAddFriendReq;
class IMReverseAddFriendRes;
class IMDelFriendReq;
class IMDelFriendRes;
class IMChgFriendRemarkReq;
class IMChgFriendRemarkRes;
class IMCreateFriendGroupReq;
class IMCreateFriendGroupRes;
class IMDelFriendGroupReq;
class IMDelFriendGroupRes;
class IMMoveFriendToGroupReq;
class IMMoveFriendToGroupRes;
class IMChgFriendGroupNameReq;
class IMChgFriendGroupNameRes;
class IMFriendNotifyReq;
class IMFriendNotifyRes;
class IMGetAddFriendReq;
class AddFrienInfo;
class RefuseAddFrienInfo;
class AgreeAddFrienInfo;
class IMGetAddFriendRes;
class IMFindUserInfoReq;
class IMFindUserInfoRes;

// ===================================================================

class IMRecentContactSessionReq : public ::google::protobuf::MessageLite {
 public:
  IMRecentContactSessionReq();
  virtual ~IMRecentContactSessionReq();

  IMRecentContactSessionReq(const IMRecentContactSessionReq& from);

  inline IMRecentContactSessionReq& operator=(const IMRecentContactSessionReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMRecentContactSessionReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMRecentContactSessionReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMRecentContactSessionReq* other);

  // implements Message ----------------------------------------------

  IMRecentContactSessionReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMRecentContactSessionReq& from);
  void MergeFrom(const IMRecentContactSessionReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 latest_update_time = 2;
  inline bool has_latest_update_time() const;
  inline void clear_latest_update_time();
  static const int kLatestUpdateTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 latest_update_time() const;
  inline void set_latest_update_time(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMRecentContactSessionReq)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_latest_update_time();
  inline void clear_has_latest_update_time();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 latest_update_time_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMRecentContactSessionReq* default_instance_;
};
// -------------------------------------------------------------------

class IMRecentContactSessionRsp : public ::google::protobuf::MessageLite {
 public:
  IMRecentContactSessionRsp();
  virtual ~IMRecentContactSessionRsp();

  IMRecentContactSessionRsp(const IMRecentContactSessionRsp& from);

  inline IMRecentContactSessionRsp& operator=(const IMRecentContactSessionRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMRecentContactSessionRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMRecentContactSessionRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMRecentContactSessionRsp* other);

  // implements Message ----------------------------------------------

  IMRecentContactSessionRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMRecentContactSessionRsp& from);
  void MergeFrom(const IMRecentContactSessionRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // repeated .IM.BaseDefine.ContactSessionInfo contact_session_list = 2;
  inline int contact_session_list_size() const;
  inline void clear_contact_session_list();
  static const int kContactSessionListFieldNumber = 2;
  inline const ::IM::BaseDefine::ContactSessionInfo& contact_session_list(int index) const;
  inline ::IM::BaseDefine::ContactSessionInfo* mutable_contact_session_list(int index);
  inline ::IM::BaseDefine::ContactSessionInfo* add_contact_session_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::ContactSessionInfo >&
      contact_session_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::ContactSessionInfo >*
      mutable_contact_session_list();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMRecentContactSessionRsp)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::ContactSessionInfo > contact_session_list_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 user_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMRecentContactSessionRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMUserStatNotify : public ::google::protobuf::MessageLite {
 public:
  IMUserStatNotify();
  virtual ~IMUserStatNotify();

  IMUserStatNotify(const IMUserStatNotify& from);

  inline IMUserStatNotify& operator=(const IMUserStatNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMUserStatNotify& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMUserStatNotify* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMUserStatNotify* other);

  // implements Message ----------------------------------------------

  IMUserStatNotify* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMUserStatNotify& from);
  void MergeFrom(const IMUserStatNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .IM.BaseDefine.UserStat user_stat = 1;
  inline bool has_user_stat() const;
  inline void clear_user_stat();
  static const int kUserStatFieldNumber = 1;
  inline const ::IM::BaseDefine::UserStat& user_stat() const;
  inline ::IM::BaseDefine::UserStat* mutable_user_stat();
  inline ::IM::BaseDefine::UserStat* release_user_stat();
  inline void set_allocated_user_stat(::IM::BaseDefine::UserStat* user_stat);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMUserStatNotify)
 private:
  inline void set_has_user_stat();
  inline void clear_has_user_stat();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::IM::BaseDefine::UserStat* user_stat_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMUserStatNotify* default_instance_;
};
// -------------------------------------------------------------------

class IMUsersInfoReq : public ::google::protobuf::MessageLite {
 public:
  IMUsersInfoReq();
  virtual ~IMUsersInfoReq();

  IMUsersInfoReq(const IMUsersInfoReq& from);

  inline IMUsersInfoReq& operator=(const IMUsersInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMUsersInfoReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMUsersInfoReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMUsersInfoReq* other);

  // implements Message ----------------------------------------------

  IMUsersInfoReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMUsersInfoReq& from);
  void MergeFrom(const IMUsersInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // repeated uint32 user_id_list = 2;
  inline int user_id_list_size() const;
  inline void clear_user_id_list();
  static const int kUserIdListFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id_list(int index) const;
  inline void set_user_id_list(int index, ::google::protobuf::uint32 value);
  inline void add_user_id_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      user_id_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_user_id_list();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMUsersInfoReq)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > user_id_list_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 user_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMUsersInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class IMUsersInfoRsp : public ::google::protobuf::MessageLite {
 public:
  IMUsersInfoRsp();
  virtual ~IMUsersInfoRsp();

  IMUsersInfoRsp(const IMUsersInfoRsp& from);

  inline IMUsersInfoRsp& operator=(const IMUsersInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMUsersInfoRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMUsersInfoRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMUsersInfoRsp* other);

  // implements Message ----------------------------------------------

  IMUsersInfoRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMUsersInfoRsp& from);
  void MergeFrom(const IMUsersInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // repeated .IM.BaseDefine.UserInfo user_info_list = 2;
  inline int user_info_list_size() const;
  inline void clear_user_info_list();
  static const int kUserInfoListFieldNumber = 2;
  inline const ::IM::BaseDefine::UserInfo& user_info_list(int index) const;
  inline ::IM::BaseDefine::UserInfo* mutable_user_info_list(int index);
  inline ::IM::BaseDefine::UserInfo* add_user_info_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserInfo >&
      user_info_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserInfo >*
      mutable_user_info_list();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMUsersInfoRsp)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserInfo > user_info_list_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 user_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMUsersInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMRemoveSessionReq : public ::google::protobuf::MessageLite {
 public:
  IMRemoveSessionReq();
  virtual ~IMRemoveSessionReq();

  IMRemoveSessionReq(const IMRemoveSessionReq& from);

  inline IMRemoveSessionReq& operator=(const IMRemoveSessionReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMRemoveSessionReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMRemoveSessionReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMRemoveSessionReq* other);

  // implements Message ----------------------------------------------

  IMRemoveSessionReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMRemoveSessionReq& from);
  void MergeFrom(const IMRemoveSessionReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.SessionType session_type = 2;
  inline bool has_session_type() const;
  inline void clear_session_type();
  static const int kSessionTypeFieldNumber = 2;
  inline ::IM::BaseDefine::SessionType session_type() const;
  inline void set_session_type(::IM::BaseDefine::SessionType value);

  // required uint32 session_id = 3;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  inline ::google::protobuf::uint32 session_id() const;
  inline void set_session_id(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMRemoveSessionReq)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_session_type();
  inline void clear_has_session_type();
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  int session_type_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 session_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMRemoveSessionReq* default_instance_;
};
// -------------------------------------------------------------------

class IMRemoveSessionRsp : public ::google::protobuf::MessageLite {
 public:
  IMRemoveSessionRsp();
  virtual ~IMRemoveSessionRsp();

  IMRemoveSessionRsp(const IMRemoveSessionRsp& from);

  inline IMRemoveSessionRsp& operator=(const IMRemoveSessionRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMRemoveSessionRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMRemoveSessionRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMRemoveSessionRsp* other);

  // implements Message ----------------------------------------------

  IMRemoveSessionRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMRemoveSessionRsp& from);
  void MergeFrom(const IMRemoveSessionRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 result_code = 2;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.SessionType session_type = 3;
  inline bool has_session_type() const;
  inline void clear_session_type();
  static const int kSessionTypeFieldNumber = 3;
  inline ::IM::BaseDefine::SessionType session_type() const;
  inline void set_session_type(::IM::BaseDefine::SessionType value);

  // required uint32 session_id = 4;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 4;
  inline ::google::protobuf::uint32 session_id() const;
  inline void set_session_id(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMRemoveSessionRsp)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_session_type();
  inline void clear_has_session_type();
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 result_code_;
  int session_type_;
  ::google::protobuf::uint32 session_id_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMRemoveSessionRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMAllUserReq : public ::google::protobuf::MessageLite {
 public:
  IMAllUserReq();
  virtual ~IMAllUserReq();

  IMAllUserReq(const IMAllUserReq& from);

  inline IMAllUserReq& operator=(const IMAllUserReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMAllUserReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMAllUserReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMAllUserReq* other);

  // implements Message ----------------------------------------------

  IMAllUserReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMAllUserReq& from);
  void MergeFrom(const IMAllUserReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 latest_update_time = 2;
  inline bool has_latest_update_time() const;
  inline void clear_latest_update_time();
  static const int kLatestUpdateTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 latest_update_time() const;
  inline void set_latest_update_time(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMAllUserReq)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_latest_update_time();
  inline void clear_has_latest_update_time();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 latest_update_time_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMAllUserReq* default_instance_;
};
// -------------------------------------------------------------------

class IMAllUserRsp : public ::google::protobuf::MessageLite {
 public:
  IMAllUserRsp();
  virtual ~IMAllUserRsp();

  IMAllUserRsp(const IMAllUserRsp& from);

  inline IMAllUserRsp& operator=(const IMAllUserRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMAllUserRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMAllUserRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMAllUserRsp* other);

  // implements Message ----------------------------------------------

  IMAllUserRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMAllUserRsp& from);
  void MergeFrom(const IMAllUserRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 latest_update_time = 2;
  inline bool has_latest_update_time() const;
  inline void clear_latest_update_time();
  static const int kLatestUpdateTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 latest_update_time() const;
  inline void set_latest_update_time(::google::protobuf::uint32 value);

  // repeated .IM.BaseDefine.UserInfo user_list = 3;
  inline int user_list_size() const;
  inline void clear_user_list();
  static const int kUserListFieldNumber = 3;
  inline const ::IM::BaseDefine::UserInfo& user_list(int index) const;
  inline ::IM::BaseDefine::UserInfo* mutable_user_list(int index);
  inline ::IM::BaseDefine::UserInfo* add_user_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserInfo >&
      user_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserInfo >*
      mutable_user_list();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMAllUserRsp)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_latest_update_time();
  inline void clear_has_latest_update_time();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 latest_update_time_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserInfo > user_list_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMAllUserRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMUsersStatReq : public ::google::protobuf::MessageLite {
 public:
  IMUsersStatReq();
  virtual ~IMUsersStatReq();

  IMUsersStatReq(const IMUsersStatReq& from);

  inline IMUsersStatReq& operator=(const IMUsersStatReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMUsersStatReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMUsersStatReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMUsersStatReq* other);

  // implements Message ----------------------------------------------

  IMUsersStatReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMUsersStatReq& from);
  void MergeFrom(const IMUsersStatReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // repeated uint32 user_id_list = 2;
  inline int user_id_list_size() const;
  inline void clear_user_id_list();
  static const int kUserIdListFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id_list(int index) const;
  inline void set_user_id_list(int index, ::google::protobuf::uint32 value);
  inline void add_user_id_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      user_id_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_user_id_list();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMUsersStatReq)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > user_id_list_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 user_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMUsersStatReq* default_instance_;
};
// -------------------------------------------------------------------

class IMUsersStatRsp : public ::google::protobuf::MessageLite {
 public:
  IMUsersStatRsp();
  virtual ~IMUsersStatRsp();

  IMUsersStatRsp(const IMUsersStatRsp& from);

  inline IMUsersStatRsp& operator=(const IMUsersStatRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMUsersStatRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMUsersStatRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMUsersStatRsp* other);

  // implements Message ----------------------------------------------

  IMUsersStatRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMUsersStatRsp& from);
  void MergeFrom(const IMUsersStatRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // repeated .IM.BaseDefine.UserStat user_stat_list = 2;
  inline int user_stat_list_size() const;
  inline void clear_user_stat_list();
  static const int kUserStatListFieldNumber = 2;
  inline const ::IM::BaseDefine::UserStat& user_stat_list(int index) const;
  inline ::IM::BaseDefine::UserStat* mutable_user_stat_list(int index);
  inline ::IM::BaseDefine::UserStat* add_user_stat_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserStat >&
      user_stat_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserStat >*
      mutable_user_stat_list();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMUsersStatRsp)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserStat > user_stat_list_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 user_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMUsersStatRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMChangeAvatarReq : public ::google::protobuf::MessageLite {
 public:
  IMChangeAvatarReq();
  virtual ~IMChangeAvatarReq();

  IMChangeAvatarReq(const IMChangeAvatarReq& from);

  inline IMChangeAvatarReq& operator=(const IMChangeAvatarReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMChangeAvatarReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMChangeAvatarReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMChangeAvatarReq* other);

  // implements Message ----------------------------------------------

  IMChangeAvatarReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMChangeAvatarReq& from);
  void MergeFrom(const IMChangeAvatarReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required string avatar_url = 2;
  inline bool has_avatar_url() const;
  inline void clear_avatar_url();
  static const int kAvatarUrlFieldNumber = 2;
  inline const ::std::string& avatar_url() const;
  inline void set_avatar_url(const ::std::string& value);
  inline void set_avatar_url(const char* value);
  inline void set_avatar_url(const char* value, size_t size);
  inline ::std::string* mutable_avatar_url();
  inline ::std::string* release_avatar_url();
  inline void set_allocated_avatar_url(::std::string* avatar_url);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMChangeAvatarReq)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_avatar_url();
  inline void clear_has_avatar_url();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* avatar_url_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 user_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMChangeAvatarReq* default_instance_;
};
// -------------------------------------------------------------------

class IMChangeAvatarRsp : public ::google::protobuf::MessageLite {
 public:
  IMChangeAvatarRsp();
  virtual ~IMChangeAvatarRsp();

  IMChangeAvatarRsp(const IMChangeAvatarRsp& from);

  inline IMChangeAvatarRsp& operator=(const IMChangeAvatarRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMChangeAvatarRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMChangeAvatarRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMChangeAvatarRsp* other);

  // implements Message ----------------------------------------------

  IMChangeAvatarRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMChangeAvatarRsp& from);
  void MergeFrom(const IMChangeAvatarRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required string avatar_url = 2;
  inline bool has_avatar_url() const;
  inline void clear_avatar_url();
  static const int kAvatarUrlFieldNumber = 2;
  inline const ::std::string& avatar_url() const;
  inline void set_avatar_url(const ::std::string& value);
  inline void set_avatar_url(const char* value);
  inline void set_avatar_url(const char* value, size_t size);
  inline ::std::string* mutable_avatar_url();
  inline ::std::string* release_avatar_url();
  inline void set_allocated_avatar_url(::std::string* avatar_url);

  // required uint32 result_code = 3;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 3;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMChangeAvatarRsp)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_avatar_url();
  inline void clear_has_avatar_url();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* avatar_url_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 result_code_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMChangeAvatarRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMPCLoginStatusNotify : public ::google::protobuf::MessageLite {
 public:
  IMPCLoginStatusNotify();
  virtual ~IMPCLoginStatusNotify();

  IMPCLoginStatusNotify(const IMPCLoginStatusNotify& from);

  inline IMPCLoginStatusNotify& operator=(const IMPCLoginStatusNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMPCLoginStatusNotify& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMPCLoginStatusNotify* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMPCLoginStatusNotify* other);

  // implements Message ----------------------------------------------

  IMPCLoginStatusNotify* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMPCLoginStatusNotify& from);
  void MergeFrom(const IMPCLoginStatusNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.UserStatType login_stat = 2;
  inline bool has_login_stat() const;
  inline void clear_login_stat();
  static const int kLoginStatFieldNumber = 2;
  inline ::IM::BaseDefine::UserStatType login_stat() const;
  inline void set_login_stat(::IM::BaseDefine::UserStatType value);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMPCLoginStatusNotify)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_login_stat();
  inline void clear_has_login_stat();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  int login_stat_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMPCLoginStatusNotify* default_instance_;
};
// -------------------------------------------------------------------

class IMRemoveSessionNotify : public ::google::protobuf::MessageLite {
 public:
  IMRemoveSessionNotify();
  virtual ~IMRemoveSessionNotify();

  IMRemoveSessionNotify(const IMRemoveSessionNotify& from);

  inline IMRemoveSessionNotify& operator=(const IMRemoveSessionNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMRemoveSessionNotify& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMRemoveSessionNotify* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMRemoveSessionNotify* other);

  // implements Message ----------------------------------------------

  IMRemoveSessionNotify* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMRemoveSessionNotify& from);
  void MergeFrom(const IMRemoveSessionNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.SessionType session_type = 2;
  inline bool has_session_type() const;
  inline void clear_session_type();
  static const int kSessionTypeFieldNumber = 2;
  inline ::IM::BaseDefine::SessionType session_type() const;
  inline void set_session_type(::IM::BaseDefine::SessionType value);

  // required uint32 session_id = 3;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  inline ::google::protobuf::uint32 session_id() const;
  inline void set_session_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMRemoveSessionNotify)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_session_type();
  inline void clear_has_session_type();
  inline void set_has_session_id();
  inline void clear_has_session_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  int session_type_;
  ::google::protobuf::uint32 session_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMRemoveSessionNotify* default_instance_;
};
// -------------------------------------------------------------------

class IMDepartmentReq : public ::google::protobuf::MessageLite {
 public:
  IMDepartmentReq();
  virtual ~IMDepartmentReq();

  IMDepartmentReq(const IMDepartmentReq& from);

  inline IMDepartmentReq& operator=(const IMDepartmentReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMDepartmentReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMDepartmentReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMDepartmentReq* other);

  // implements Message ----------------------------------------------

  IMDepartmentReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMDepartmentReq& from);
  void MergeFrom(const IMDepartmentReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 latest_update_time = 2;
  inline bool has_latest_update_time() const;
  inline void clear_latest_update_time();
  static const int kLatestUpdateTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 latest_update_time() const;
  inline void set_latest_update_time(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMDepartmentReq)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_latest_update_time();
  inline void clear_has_latest_update_time();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 latest_update_time_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMDepartmentReq* default_instance_;
};
// -------------------------------------------------------------------

class IMDepartmentRsp : public ::google::protobuf::MessageLite {
 public:
  IMDepartmentRsp();
  virtual ~IMDepartmentRsp();

  IMDepartmentRsp(const IMDepartmentRsp& from);

  inline IMDepartmentRsp& operator=(const IMDepartmentRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMDepartmentRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMDepartmentRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMDepartmentRsp* other);

  // implements Message ----------------------------------------------

  IMDepartmentRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMDepartmentRsp& from);
  void MergeFrom(const IMDepartmentRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 latest_update_time = 2;
  inline bool has_latest_update_time() const;
  inline void clear_latest_update_time();
  static const int kLatestUpdateTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 latest_update_time() const;
  inline void set_latest_update_time(::google::protobuf::uint32 value);

  // repeated .IM.BaseDefine.DepartInfo dept_list = 3;
  inline int dept_list_size() const;
  inline void clear_dept_list();
  static const int kDeptListFieldNumber = 3;
  inline const ::IM::BaseDefine::DepartInfo& dept_list(int index) const;
  inline ::IM::BaseDefine::DepartInfo* mutable_dept_list(int index);
  inline ::IM::BaseDefine::DepartInfo* add_dept_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::DepartInfo >&
      dept_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::DepartInfo >*
      mutable_dept_list();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMDepartmentRsp)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_latest_update_time();
  inline void clear_has_latest_update_time();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 latest_update_time_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::DepartInfo > dept_list_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMDepartmentRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMAddFriendReq : public ::google::protobuf::MessageLite {
 public:
  IMAddFriendReq();
  virtual ~IMAddFriendReq();

  IMAddFriendReq(const IMAddFriendReq& from);

  inline IMAddFriendReq& operator=(const IMAddFriendReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMAddFriendReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMAddFriendReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMAddFriendReq* other);

  // implements Message ----------------------------------------------

  IMAddFriendReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMAddFriendReq& from);
  void MergeFrom(const IMAddFriendReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 from_user_id = 1;
  inline bool has_from_user_id() const;
  inline void clear_from_user_id();
  static const int kFromUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 from_user_id() const;
  inline void set_from_user_id(::google::protobuf::uint32 value);

  // required uint32 to_user_id = 2;
  inline bool has_to_user_id() const;
  inline void clear_to_user_id();
  static const int kToUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 to_user_id() const;
  inline void set_to_user_id(::google::protobuf::uint32 value);

  // optional uint32 friend_groupid = 3;
  inline bool has_friend_groupid() const;
  inline void clear_friend_groupid();
  static const int kFriendGroupidFieldNumber = 3;
  inline ::google::protobuf::uint32 friend_groupid() const;
  inline void set_friend_groupid(::google::protobuf::uint32 value);

  // optional string friend_remark = 4;
  inline bool has_friend_remark() const;
  inline void clear_friend_remark();
  static const int kFriendRemarkFieldNumber = 4;
  inline const ::std::string& friend_remark() const;
  inline void set_friend_remark(const ::std::string& value);
  inline void set_friend_remark(const char* value);
  inline void set_friend_remark(const char* value, size_t size);
  inline ::std::string* mutable_friend_remark();
  inline ::std::string* release_friend_remark();
  inline void set_allocated_friend_remark(::std::string* friend_remark);

  // optional string extra_info = 5;
  inline bool has_extra_info() const;
  inline void clear_extra_info();
  static const int kExtraInfoFieldNumber = 5;
  inline const ::std::string& extra_info() const;
  inline void set_extra_info(const ::std::string& value);
  inline void set_extra_info(const char* value);
  inline void set_extra_info(const char* value, size_t size);
  inline ::std::string* mutable_extra_info();
  inline ::std::string* release_extra_info();
  inline void set_allocated_extra_info(::std::string* extra_info);

  // optional string user_nickname = 6;
  inline bool has_user_nickname() const;
  inline void clear_user_nickname();
  static const int kUserNicknameFieldNumber = 6;
  inline const ::std::string& user_nickname() const;
  inline void set_user_nickname(const ::std::string& value);
  inline void set_user_nickname(const char* value);
  inline void set_user_nickname(const char* value, size_t size);
  inline ::std::string* mutable_user_nickname();
  inline ::std::string* release_user_nickname();
  inline void set_allocated_user_nickname(::std::string* user_nickname);

  // optional string user_headlink = 7;
  inline bool has_user_headlink() const;
  inline void clear_user_headlink();
  static const int kUserHeadlinkFieldNumber = 7;
  inline const ::std::string& user_headlink() const;
  inline void set_user_headlink(const ::std::string& value);
  inline void set_user_headlink(const char* value);
  inline void set_user_headlink(const char* value, size_t size);
  inline ::std::string* mutable_user_headlink();
  inline ::std::string* release_user_headlink();
  inline void set_allocated_user_headlink(::std::string* user_headlink);

  // optional uint32 user_gender = 8;
  inline bool has_user_gender() const;
  inline void clear_user_gender();
  static const int kUserGenderFieldNumber = 8;
  inline ::google::protobuf::uint32 user_gender() const;
  inline void set_user_gender(::google::protobuf::uint32 value);

  // optional uint32 user_uid = 9;
  inline bool has_user_uid() const;
  inline void clear_user_uid();
  static const int kUserUidFieldNumber = 9;
  inline ::google::protobuf::uint32 user_uid() const;
  inline void set_user_uid(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMAddFriendReq)
 private:
  inline void set_has_from_user_id();
  inline void clear_has_from_user_id();
  inline void set_has_to_user_id();
  inline void clear_has_to_user_id();
  inline void set_has_friend_groupid();
  inline void clear_has_friend_groupid();
  inline void set_has_friend_remark();
  inline void clear_has_friend_remark();
  inline void set_has_extra_info();
  inline void clear_has_extra_info();
  inline void set_has_user_nickname();
  inline void clear_has_user_nickname();
  inline void set_has_user_headlink();
  inline void clear_has_user_headlink();
  inline void set_has_user_gender();
  inline void clear_has_user_gender();
  inline void set_has_user_uid();
  inline void clear_has_user_uid();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 from_user_id_;
  ::google::protobuf::uint32 to_user_id_;
  ::std::string* friend_remark_;
  ::std::string* extra_info_;
  ::google::protobuf::uint32 friend_groupid_;
  ::google::protobuf::uint32 user_gender_;
  ::std::string* user_nickname_;
  ::std::string* user_headlink_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 user_uid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMAddFriendReq* default_instance_;
};
// -------------------------------------------------------------------

class IMAddFriendRes : public ::google::protobuf::MessageLite {
 public:
  IMAddFriendRes();
  virtual ~IMAddFriendRes();

  IMAddFriendRes(const IMAddFriendRes& from);

  inline IMAddFriendRes& operator=(const IMAddFriendRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMAddFriendRes& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMAddFriendRes* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMAddFriendRes* other);

  // implements Message ----------------------------------------------

  IMAddFriendRes* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMAddFriendRes& from);
  void MergeFrom(const IMAddFriendRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 result_code = 2;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMAddFriendRes)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 result_code_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMAddFriendRes* default_instance_;
};
// -------------------------------------------------------------------

class IMReverseAddFriendReq : public ::google::protobuf::MessageLite {
 public:
  IMReverseAddFriendReq();
  virtual ~IMReverseAddFriendReq();

  IMReverseAddFriendReq(const IMReverseAddFriendReq& from);

  inline IMReverseAddFriendReq& operator=(const IMReverseAddFriendReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMReverseAddFriendReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMReverseAddFriendReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMReverseAddFriendReq* other);

  // implements Message ----------------------------------------------

  IMReverseAddFriendReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMReverseAddFriendReq& from);
  void MergeFrom(const IMReverseAddFriendReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 from_user_id = 1;
  inline bool has_from_user_id() const;
  inline void clear_from_user_id();
  static const int kFromUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 from_user_id() const;
  inline void set_from_user_id(::google::protobuf::uint32 value);

  // required uint32 to_user_id = 2;
  inline bool has_to_user_id() const;
  inline void clear_to_user_id();
  static const int kToUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 to_user_id() const;
  inline void set_to_user_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.FriendResStatusType friendres_status_type = 3;
  inline bool has_friendres_status_type() const;
  inline void clear_friendres_status_type();
  static const int kFriendresStatusTypeFieldNumber = 3;
  inline ::IM::BaseDefine::FriendResStatusType friendres_status_type() const;
  inline void set_friendres_status_type(::IM::BaseDefine::FriendResStatusType value);

  // optional uint32 friend_groupid = 4;
  inline bool has_friend_groupid() const;
  inline void clear_friend_groupid();
  static const int kFriendGroupidFieldNumber = 4;
  inline ::google::protobuf::uint32 friend_groupid() const;
  inline void set_friend_groupid(::google::protobuf::uint32 value);

  // optional string friend_remark = 5;
  inline bool has_friend_remark() const;
  inline void clear_friend_remark();
  static const int kFriendRemarkFieldNumber = 5;
  inline const ::std::string& friend_remark() const;
  inline void set_friend_remark(const ::std::string& value);
  inline void set_friend_remark(const char* value);
  inline void set_friend_remark(const char* value, size_t size);
  inline ::std::string* mutable_friend_remark();
  inline ::std::string* release_friend_remark();
  inline void set_allocated_friend_remark(::std::string* friend_remark);

  // optional string refuse_reason = 10;
  inline bool has_refuse_reason() const;
  inline void clear_refuse_reason();
  static const int kRefuseReasonFieldNumber = 10;
  inline const ::std::string& refuse_reason() const;
  inline void set_refuse_reason(const ::std::string& value);
  inline void set_refuse_reason(const char* value);
  inline void set_refuse_reason(const char* value, size_t size);
  inline ::std::string* mutable_refuse_reason();
  inline ::std::string* release_refuse_reason();
  inline void set_allocated_refuse_reason(::std::string* refuse_reason);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMReverseAddFriendReq)
 private:
  inline void set_has_from_user_id();
  inline void clear_has_from_user_id();
  inline void set_has_to_user_id();
  inline void clear_has_to_user_id();
  inline void set_has_friendres_status_type();
  inline void clear_has_friendres_status_type();
  inline void set_has_friend_groupid();
  inline void clear_has_friend_groupid();
  inline void set_has_friend_remark();
  inline void clear_has_friend_remark();
  inline void set_has_refuse_reason();
  inline void clear_has_refuse_reason();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 from_user_id_;
  ::google::protobuf::uint32 to_user_id_;
  int friendres_status_type_;
  ::google::protobuf::uint32 friend_groupid_;
  ::std::string* friend_remark_;
  ::std::string* refuse_reason_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMReverseAddFriendReq* default_instance_;
};
// -------------------------------------------------------------------

class IMReverseAddFriendRes : public ::google::protobuf::MessageLite {
 public:
  IMReverseAddFriendRes();
  virtual ~IMReverseAddFriendRes();

  IMReverseAddFriendRes(const IMReverseAddFriendRes& from);

  inline IMReverseAddFriendRes& operator=(const IMReverseAddFriendRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMReverseAddFriendRes& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMReverseAddFriendRes* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMReverseAddFriendRes* other);

  // implements Message ----------------------------------------------

  IMReverseAddFriendRes* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMReverseAddFriendRes& from);
  void MergeFrom(const IMReverseAddFriendRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 result_code = 2;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // optional uint32 friend_id = 10;
  inline bool has_friend_id() const;
  inline void clear_friend_id();
  static const int kFriendIdFieldNumber = 10;
  inline ::google::protobuf::uint32 friend_id() const;
  inline void set_friend_id(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMReverseAddFriendRes)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_friend_id();
  inline void clear_has_friend_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 result_code_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 friend_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMReverseAddFriendRes* default_instance_;
};
// -------------------------------------------------------------------

class IMDelFriendReq : public ::google::protobuf::MessageLite {
 public:
  IMDelFriendReq();
  virtual ~IMDelFriendReq();

  IMDelFriendReq(const IMDelFriendReq& from);

  inline IMDelFriendReq& operator=(const IMDelFriendReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMDelFriendReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMDelFriendReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMDelFriendReq* other);

  // implements Message ----------------------------------------------

  IMDelFriendReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMDelFriendReq& from);
  void MergeFrom(const IMDelFriendReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 del_user_id = 2;
  inline bool has_del_user_id() const;
  inline void clear_del_user_id();
  static const int kDelUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 del_user_id() const;
  inline void set_del_user_id(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMDelFriendReq)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_del_user_id();
  inline void clear_has_del_user_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 del_user_id_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMDelFriendReq* default_instance_;
};
// -------------------------------------------------------------------

class IMDelFriendRes : public ::google::protobuf::MessageLite {
 public:
  IMDelFriendRes();
  virtual ~IMDelFriendRes();

  IMDelFriendRes(const IMDelFriendRes& from);

  inline IMDelFriendRes& operator=(const IMDelFriendRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMDelFriendRes& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMDelFriendRes* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMDelFriendRes* other);

  // implements Message ----------------------------------------------

  IMDelFriendRes* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMDelFriendRes& from);
  void MergeFrom(const IMDelFriendRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 result_code = 2;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // optional uint32 friend_id = 10;
  inline bool has_friend_id() const;
  inline void clear_friend_id();
  static const int kFriendIdFieldNumber = 10;
  inline ::google::protobuf::uint32 friend_id() const;
  inline void set_friend_id(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMDelFriendRes)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_friend_id();
  inline void clear_has_friend_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 result_code_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 friend_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMDelFriendRes* default_instance_;
};
// -------------------------------------------------------------------

class IMChgFriendRemarkReq : public ::google::protobuf::MessageLite {
 public:
  IMChgFriendRemarkReq();
  virtual ~IMChgFriendRemarkReq();

  IMChgFriendRemarkReq(const IMChgFriendRemarkReq& from);

  inline IMChgFriendRemarkReq& operator=(const IMChgFriendRemarkReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMChgFriendRemarkReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMChgFriendRemarkReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMChgFriendRemarkReq* other);

  // implements Message ----------------------------------------------

  IMChgFriendRemarkReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMChgFriendRemarkReq& from);
  void MergeFrom(const IMChgFriendRemarkReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 friend_id = 2;
  inline bool has_friend_id() const;
  inline void clear_friend_id();
  static const int kFriendIdFieldNumber = 2;
  inline ::google::protobuf::uint32 friend_id() const;
  inline void set_friend_id(::google::protobuf::uint32 value);

  // required string friend_nick = 3;
  inline bool has_friend_nick() const;
  inline void clear_friend_nick();
  static const int kFriendNickFieldNumber = 3;
  inline const ::std::string& friend_nick() const;
  inline void set_friend_nick(const ::std::string& value);
  inline void set_friend_nick(const char* value);
  inline void set_friend_nick(const char* value, size_t size);
  inline ::std::string* mutable_friend_nick();
  inline ::std::string* release_friend_nick();
  inline void set_allocated_friend_nick(::std::string* friend_nick);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMChgFriendRemarkReq)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_friend_id();
  inline void clear_has_friend_id();
  inline void set_has_friend_nick();
  inline void clear_has_friend_nick();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 friend_id_;
  ::std::string* friend_nick_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMChgFriendRemarkReq* default_instance_;
};
// -------------------------------------------------------------------

class IMChgFriendRemarkRes : public ::google::protobuf::MessageLite {
 public:
  IMChgFriendRemarkRes();
  virtual ~IMChgFriendRemarkRes();

  IMChgFriendRemarkRes(const IMChgFriendRemarkRes& from);

  inline IMChgFriendRemarkRes& operator=(const IMChgFriendRemarkRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMChgFriendRemarkRes& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMChgFriendRemarkRes* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMChgFriendRemarkRes* other);

  // implements Message ----------------------------------------------

  IMChgFriendRemarkRes* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMChgFriendRemarkRes& from);
  void MergeFrom(const IMChgFriendRemarkRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 result_code = 2;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // optional uint32 friend_id = 10;
  inline bool has_friend_id() const;
  inline void clear_friend_id();
  static const int kFriendIdFieldNumber = 10;
  inline ::google::protobuf::uint32 friend_id() const;
  inline void set_friend_id(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMChgFriendRemarkRes)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_friend_id();
  inline void clear_has_friend_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 result_code_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 friend_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMChgFriendRemarkRes* default_instance_;
};
// -------------------------------------------------------------------

class IMCreateFriendGroupReq : public ::google::protobuf::MessageLite {
 public:
  IMCreateFriendGroupReq();
  virtual ~IMCreateFriendGroupReq();

  IMCreateFriendGroupReq(const IMCreateFriendGroupReq& from);

  inline IMCreateFriendGroupReq& operator=(const IMCreateFriendGroupReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMCreateFriendGroupReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMCreateFriendGroupReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMCreateFriendGroupReq* other);

  // implements Message ----------------------------------------------

  IMCreateFriendGroupReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMCreateFriendGroupReq& from);
  void MergeFrom(const IMCreateFriendGroupReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required string group_name = 2;
  inline bool has_group_name() const;
  inline void clear_group_name();
  static const int kGroupNameFieldNumber = 2;
  inline const ::std::string& group_name() const;
  inline void set_group_name(const ::std::string& value);
  inline void set_group_name(const char* value);
  inline void set_group_name(const char* value, size_t size);
  inline ::std::string* mutable_group_name();
  inline ::std::string* release_group_name();
  inline void set_allocated_group_name(::std::string* group_name);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMCreateFriendGroupReq)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_group_name();
  inline void clear_has_group_name();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* group_name_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 user_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMCreateFriendGroupReq* default_instance_;
};
// -------------------------------------------------------------------

class IMCreateFriendGroupRes : public ::google::protobuf::MessageLite {
 public:
  IMCreateFriendGroupRes();
  virtual ~IMCreateFriendGroupRes();

  IMCreateFriendGroupRes(const IMCreateFriendGroupRes& from);

  inline IMCreateFriendGroupRes& operator=(const IMCreateFriendGroupRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMCreateFriendGroupRes& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMCreateFriendGroupRes* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMCreateFriendGroupRes* other);

  // implements Message ----------------------------------------------

  IMCreateFriendGroupRes* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMCreateFriendGroupRes& from);
  void MergeFrom(const IMCreateFriendGroupRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMCreateFriendGroupRes)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 group_id_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMCreateFriendGroupRes* default_instance_;
};
// -------------------------------------------------------------------

class IMDelFriendGroupReq : public ::google::protobuf::MessageLite {
 public:
  IMDelFriendGroupReq();
  virtual ~IMDelFriendGroupReq();

  IMDelFriendGroupReq(const IMDelFriendGroupReq& from);

  inline IMDelFriendGroupReq& operator=(const IMDelFriendGroupReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMDelFriendGroupReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMDelFriendGroupReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMDelFriendGroupReq* other);

  // implements Message ----------------------------------------------

  IMDelFriendGroupReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMDelFriendGroupReq& from);
  void MergeFrom(const IMDelFriendGroupReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMDelFriendGroupReq)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 group_id_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMDelFriendGroupReq* default_instance_;
};
// -------------------------------------------------------------------

class IMDelFriendGroupRes : public ::google::protobuf::MessageLite {
 public:
  IMDelFriendGroupRes();
  virtual ~IMDelFriendGroupRes();

  IMDelFriendGroupRes(const IMDelFriendGroupRes& from);

  inline IMDelFriendGroupRes& operator=(const IMDelFriendGroupRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMDelFriendGroupRes& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMDelFriendGroupRes* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMDelFriendGroupRes* other);

  // implements Message ----------------------------------------------

  IMDelFriendGroupRes* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMDelFriendGroupRes& from);
  void MergeFrom(const IMDelFriendGroupRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 result_code = 2;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMDelFriendGroupRes)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 result_code_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMDelFriendGroupRes* default_instance_;
};
// -------------------------------------------------------------------

class IMMoveFriendToGroupReq : public ::google::protobuf::MessageLite {
 public:
  IMMoveFriendToGroupReq();
  virtual ~IMMoveFriendToGroupReq();

  IMMoveFriendToGroupReq(const IMMoveFriendToGroupReq& from);

  inline IMMoveFriendToGroupReq& operator=(const IMMoveFriendToGroupReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMMoveFriendToGroupReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMMoveFriendToGroupReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMMoveFriendToGroupReq* other);

  // implements Message ----------------------------------------------

  IMMoveFriendToGroupReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMMoveFriendToGroupReq& from);
  void MergeFrom(const IMMoveFriendToGroupReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // repeated uint32 friend_id_list = 3;
  inline int friend_id_list_size() const;
  inline void clear_friend_id_list();
  static const int kFriendIdListFieldNumber = 3;
  inline ::google::protobuf::uint32 friend_id_list(int index) const;
  inline void set_friend_id_list(int index, ::google::protobuf::uint32 value);
  inline void add_friend_id_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      friend_id_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_friend_id_list();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMMoveFriendToGroupReq)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > friend_id_list_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMMoveFriendToGroupReq* default_instance_;
};
// -------------------------------------------------------------------

class IMMoveFriendToGroupRes : public ::google::protobuf::MessageLite {
 public:
  IMMoveFriendToGroupRes();
  virtual ~IMMoveFriendToGroupRes();

  IMMoveFriendToGroupRes(const IMMoveFriendToGroupRes& from);

  inline IMMoveFriendToGroupRes& operator=(const IMMoveFriendToGroupRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMMoveFriendToGroupRes& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMMoveFriendToGroupRes* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMMoveFriendToGroupRes* other);

  // implements Message ----------------------------------------------

  IMMoveFriendToGroupRes* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMMoveFriendToGroupRes& from);
  void MergeFrom(const IMMoveFriendToGroupRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 result_code = 2;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMMoveFriendToGroupRes)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 result_code_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMMoveFriendToGroupRes* default_instance_;
};
// -------------------------------------------------------------------

class IMChgFriendGroupNameReq : public ::google::protobuf::MessageLite {
 public:
  IMChgFriendGroupNameReq();
  virtual ~IMChgFriendGroupNameReq();

  IMChgFriendGroupNameReq(const IMChgFriendGroupNameReq& from);

  inline IMChgFriendGroupNameReq& operator=(const IMChgFriendGroupNameReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMChgFriendGroupNameReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMChgFriendGroupNameReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMChgFriendGroupNameReq* other);

  // implements Message ----------------------------------------------

  IMChgFriendGroupNameReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMChgFriendGroupNameReq& from);
  void MergeFrom(const IMChgFriendGroupNameReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required string group_name = 3;
  inline bool has_group_name() const;
  inline void clear_group_name();
  static const int kGroupNameFieldNumber = 3;
  inline const ::std::string& group_name() const;
  inline void set_group_name(const ::std::string& value);
  inline void set_group_name(const char* value);
  inline void set_group_name(const char* value, size_t size);
  inline ::std::string* mutable_group_name();
  inline ::std::string* release_group_name();
  inline void set_allocated_group_name(::std::string* group_name);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMChgFriendGroupNameReq)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_group_name();
  inline void clear_has_group_name();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 group_id_;
  ::std::string* group_name_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMChgFriendGroupNameReq* default_instance_;
};
// -------------------------------------------------------------------

class IMChgFriendGroupNameRes : public ::google::protobuf::MessageLite {
 public:
  IMChgFriendGroupNameRes();
  virtual ~IMChgFriendGroupNameRes();

  IMChgFriendGroupNameRes(const IMChgFriendGroupNameRes& from);

  inline IMChgFriendGroupNameRes& operator=(const IMChgFriendGroupNameRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMChgFriendGroupNameRes& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMChgFriendGroupNameRes* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMChgFriendGroupNameRes* other);

  // implements Message ----------------------------------------------

  IMChgFriendGroupNameRes* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMChgFriendGroupNameRes& from);
  void MergeFrom(const IMChgFriendGroupNameRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 result_code = 2;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMChgFriendGroupNameRes)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 result_code_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMChgFriendGroupNameRes* default_instance_;
};
// -------------------------------------------------------------------

class IMFriendNotifyReq : public ::google::protobuf::MessageLite {
 public:
  IMFriendNotifyReq();
  virtual ~IMFriendNotifyReq();

  IMFriendNotifyReq(const IMFriendNotifyReq& from);

  inline IMFriendNotifyReq& operator=(const IMFriendNotifyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMFriendNotifyReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMFriendNotifyReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMFriendNotifyReq* other);

  // implements Message ----------------------------------------------

  IMFriendNotifyReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMFriendNotifyReq& from);
  void MergeFrom(const IMFriendNotifyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 from_user_id = 1;
  inline bool has_from_user_id() const;
  inline void clear_from_user_id();
  static const int kFromUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 from_user_id() const;
  inline void set_from_user_id(::google::protobuf::uint32 value);

  // required uint32 to_user_id = 2;
  inline bool has_to_user_id() const;
  inline void clear_to_user_id();
  static const int kToUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 to_user_id() const;
  inline void set_to_user_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.FriendResStatusType friendres_status_type = 3;
  inline bool has_friendres_status_type() const;
  inline void clear_friendres_status_type();
  static const int kFriendresStatusTypeFieldNumber = 3;
  inline ::IM::BaseDefine::FriendResStatusType friendres_status_type() const;
  inline void set_friendres_status_type(::IM::BaseDefine::FriendResStatusType value);

  // optional string user_nickname = 6;
  inline bool has_user_nickname() const;
  inline void clear_user_nickname();
  static const int kUserNicknameFieldNumber = 6;
  inline const ::std::string& user_nickname() const;
  inline void set_user_nickname(const ::std::string& value);
  inline void set_user_nickname(const char* value);
  inline void set_user_nickname(const char* value, size_t size);
  inline ::std::string* mutable_user_nickname();
  inline ::std::string* release_user_nickname();
  inline void set_allocated_user_nickname(::std::string* user_nickname);

  // optional string user_headlink = 7;
  inline bool has_user_headlink() const;
  inline void clear_user_headlink();
  static const int kUserHeadlinkFieldNumber = 7;
  inline const ::std::string& user_headlink() const;
  inline void set_user_headlink(const ::std::string& value);
  inline void set_user_headlink(const char* value);
  inline void set_user_headlink(const char* value, size_t size);
  inline ::std::string* mutable_user_headlink();
  inline ::std::string* release_user_headlink();
  inline void set_allocated_user_headlink(::std::string* user_headlink);

  // optional uint32 user_gender = 8;
  inline bool has_user_gender() const;
  inline void clear_user_gender();
  static const int kUserGenderFieldNumber = 8;
  inline ::google::protobuf::uint32 user_gender() const;
  inline void set_user_gender(::google::protobuf::uint32 value);

  // optional uint32 user_uid = 9;
  inline bool has_user_uid() const;
  inline void clear_user_uid();
  static const int kUserUidFieldNumber = 9;
  inline ::google::protobuf::uint32 user_uid() const;
  inline void set_user_uid(::google::protobuf::uint32 value);

  // optional string refuse_reason = 10;
  inline bool has_refuse_reason() const;
  inline void clear_refuse_reason();
  static const int kRefuseReasonFieldNumber = 10;
  inline const ::std::string& refuse_reason() const;
  inline void set_refuse_reason(const ::std::string& value);
  inline void set_refuse_reason(const char* value);
  inline void set_refuse_reason(const char* value, size_t size);
  inline ::std::string* mutable_refuse_reason();
  inline ::std::string* release_refuse_reason();
  inline void set_allocated_refuse_reason(::std::string* refuse_reason);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMFriendNotifyReq)
 private:
  inline void set_has_from_user_id();
  inline void clear_has_from_user_id();
  inline void set_has_to_user_id();
  inline void clear_has_to_user_id();
  inline void set_has_friendres_status_type();
  inline void clear_has_friendres_status_type();
  inline void set_has_user_nickname();
  inline void clear_has_user_nickname();
  inline void set_has_user_headlink();
  inline void clear_has_user_headlink();
  inline void set_has_user_gender();
  inline void clear_has_user_gender();
  inline void set_has_user_uid();
  inline void clear_has_user_uid();
  inline void set_has_refuse_reason();
  inline void clear_has_refuse_reason();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 from_user_id_;
  ::google::protobuf::uint32 to_user_id_;
  ::std::string* user_nickname_;
  int friendres_status_type_;
  ::google::protobuf::uint32 user_gender_;
  ::std::string* user_headlink_;
  ::std::string* refuse_reason_;
  ::google::protobuf::uint32 user_uid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMFriendNotifyReq* default_instance_;
};
// -------------------------------------------------------------------

class IMFriendNotifyRes : public ::google::protobuf::MessageLite {
 public:
  IMFriendNotifyRes();
  virtual ~IMFriendNotifyRes();

  IMFriendNotifyRes(const IMFriendNotifyRes& from);

  inline IMFriendNotifyRes& operator=(const IMFriendNotifyRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMFriendNotifyRes& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMFriendNotifyRes* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMFriendNotifyRes* other);

  // implements Message ----------------------------------------------

  IMFriendNotifyRes* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMFriendNotifyRes& from);
  void MergeFrom(const IMFriendNotifyRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 from_user_id = 1;
  inline bool has_from_user_id() const;
  inline void clear_from_user_id();
  static const int kFromUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 from_user_id() const;
  inline void set_from_user_id(::google::protobuf::uint32 value);

  // required uint32 to_user_id = 2;
  inline bool has_to_user_id() const;
  inline void clear_to_user_id();
  static const int kToUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 to_user_id() const;
  inline void set_to_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMFriendNotifyRes)
 private:
  inline void set_has_from_user_id();
  inline void clear_has_from_user_id();
  inline void set_has_to_user_id();
  inline void clear_has_to_user_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 from_user_id_;
  ::google::protobuf::uint32 to_user_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMFriendNotifyRes* default_instance_;
};
// -------------------------------------------------------------------

class IMGetAddFriendReq : public ::google::protobuf::MessageLite {
 public:
  IMGetAddFriendReq();
  virtual ~IMGetAddFriendReq();

  IMGetAddFriendReq(const IMGetAddFriendReq& from);

  inline IMGetAddFriendReq& operator=(const IMGetAddFriendReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGetAddFriendReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGetAddFriendReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGetAddFriendReq* other);

  // implements Message ----------------------------------------------

  IMGetAddFriendReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGetAddFriendReq& from);
  void MergeFrom(const IMGetAddFriendReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMGetAddFriendReq)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 user_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMGetAddFriendReq* default_instance_;
};
// -------------------------------------------------------------------

class AddFrienInfo : public ::google::protobuf::MessageLite {
 public:
  AddFrienInfo();
  virtual ~AddFrienInfo();

  AddFrienInfo(const AddFrienInfo& from);

  inline AddFrienInfo& operator=(const AddFrienInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const AddFrienInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const AddFrienInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(AddFrienInfo* other);

  // implements Message ----------------------------------------------

  AddFrienInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AddFrienInfo& from);
  void MergeFrom(const AddFrienInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 from_user_id = 1;
  inline bool has_from_user_id() const;
  inline void clear_from_user_id();
  static const int kFromUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 from_user_id() const;
  inline void set_from_user_id(::google::protobuf::uint32 value);

  // required uint32 create_time = 2;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 create_time() const;
  inline void set_create_time(::google::protobuf::uint32 value);

  // optional string extra_info = 3;
  inline bool has_extra_info() const;
  inline void clear_extra_info();
  static const int kExtraInfoFieldNumber = 3;
  inline const ::std::string& extra_info() const;
  inline void set_extra_info(const ::std::string& value);
  inline void set_extra_info(const char* value);
  inline void set_extra_info(const char* value, size_t size);
  inline ::std::string* mutable_extra_info();
  inline ::std::string* release_extra_info();
  inline void set_allocated_extra_info(::std::string* extra_info);

  // optional string user_nickname = 6;
  inline bool has_user_nickname() const;
  inline void clear_user_nickname();
  static const int kUserNicknameFieldNumber = 6;
  inline const ::std::string& user_nickname() const;
  inline void set_user_nickname(const ::std::string& value);
  inline void set_user_nickname(const char* value);
  inline void set_user_nickname(const char* value, size_t size);
  inline ::std::string* mutable_user_nickname();
  inline ::std::string* release_user_nickname();
  inline void set_allocated_user_nickname(::std::string* user_nickname);

  // optional string user_headlink = 7;
  inline bool has_user_headlink() const;
  inline void clear_user_headlink();
  static const int kUserHeadlinkFieldNumber = 7;
  inline const ::std::string& user_headlink() const;
  inline void set_user_headlink(const ::std::string& value);
  inline void set_user_headlink(const char* value);
  inline void set_user_headlink(const char* value, size_t size);
  inline ::std::string* mutable_user_headlink();
  inline ::std::string* release_user_headlink();
  inline void set_allocated_user_headlink(::std::string* user_headlink);

  // optional uint32 user_gender = 8;
  inline bool has_user_gender() const;
  inline void clear_user_gender();
  static const int kUserGenderFieldNumber = 8;
  inline ::google::protobuf::uint32 user_gender() const;
  inline void set_user_gender(::google::protobuf::uint32 value);

  // optional uint32 user_uid = 9;
  inline bool has_user_uid() const;
  inline void clear_user_uid();
  static const int kUserUidFieldNumber = 9;
  inline ::google::protobuf::uint32 user_uid() const;
  inline void set_user_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Buddy.AddFrienInfo)
 private:
  inline void set_has_from_user_id();
  inline void clear_has_from_user_id();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_extra_info();
  inline void clear_has_extra_info();
  inline void set_has_user_nickname();
  inline void clear_has_user_nickname();
  inline void set_has_user_headlink();
  inline void clear_has_user_headlink();
  inline void set_has_user_gender();
  inline void clear_has_user_gender();
  inline void set_has_user_uid();
  inline void clear_has_user_uid();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 from_user_id_;
  ::google::protobuf::uint32 create_time_;
  ::std::string* extra_info_;
  ::std::string* user_nickname_;
  ::std::string* user_headlink_;
  ::google::protobuf::uint32 user_gender_;
  ::google::protobuf::uint32 user_uid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static AddFrienInfo* default_instance_;
};
// -------------------------------------------------------------------

class RefuseAddFrienInfo : public ::google::protobuf::MessageLite {
 public:
  RefuseAddFrienInfo();
  virtual ~RefuseAddFrienInfo();

  RefuseAddFrienInfo(const RefuseAddFrienInfo& from);

  inline RefuseAddFrienInfo& operator=(const RefuseAddFrienInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const RefuseAddFrienInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RefuseAddFrienInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RefuseAddFrienInfo* other);

  // implements Message ----------------------------------------------

  RefuseAddFrienInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RefuseAddFrienInfo& from);
  void MergeFrom(const RefuseAddFrienInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 refuse_user_id = 1;
  inline bool has_refuse_user_id() const;
  inline void clear_refuse_user_id();
  static const int kRefuseUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 refuse_user_id() const;
  inline void set_refuse_user_id(::google::protobuf::uint32 value);

  // required uint32 resp_time = 2;
  inline bool has_resp_time() const;
  inline void clear_resp_time();
  static const int kRespTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 resp_time() const;
  inline void set_resp_time(::google::protobuf::uint32 value);

  // optional string refuse_reason = 3;
  inline bool has_refuse_reason() const;
  inline void clear_refuse_reason();
  static const int kRefuseReasonFieldNumber = 3;
  inline const ::std::string& refuse_reason() const;
  inline void set_refuse_reason(const ::std::string& value);
  inline void set_refuse_reason(const char* value);
  inline void set_refuse_reason(const char* value, size_t size);
  inline ::std::string* mutable_refuse_reason();
  inline ::std::string* release_refuse_reason();
  inline void set_allocated_refuse_reason(::std::string* refuse_reason);

  // optional string user_nickname = 6;
  inline bool has_user_nickname() const;
  inline void clear_user_nickname();
  static const int kUserNicknameFieldNumber = 6;
  inline const ::std::string& user_nickname() const;
  inline void set_user_nickname(const ::std::string& value);
  inline void set_user_nickname(const char* value);
  inline void set_user_nickname(const char* value, size_t size);
  inline ::std::string* mutable_user_nickname();
  inline ::std::string* release_user_nickname();
  inline void set_allocated_user_nickname(::std::string* user_nickname);

  // optional string user_headlink = 7;
  inline bool has_user_headlink() const;
  inline void clear_user_headlink();
  static const int kUserHeadlinkFieldNumber = 7;
  inline const ::std::string& user_headlink() const;
  inline void set_user_headlink(const ::std::string& value);
  inline void set_user_headlink(const char* value);
  inline void set_user_headlink(const char* value, size_t size);
  inline ::std::string* mutable_user_headlink();
  inline ::std::string* release_user_headlink();
  inline void set_allocated_user_headlink(::std::string* user_headlink);

  // optional uint32 user_gender = 8;
  inline bool has_user_gender() const;
  inline void clear_user_gender();
  static const int kUserGenderFieldNumber = 8;
  inline ::google::protobuf::uint32 user_gender() const;
  inline void set_user_gender(::google::protobuf::uint32 value);

  // optional uint32 user_uid = 9;
  inline bool has_user_uid() const;
  inline void clear_user_uid();
  static const int kUserUidFieldNumber = 9;
  inline ::google::protobuf::uint32 user_uid() const;
  inline void set_user_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Buddy.RefuseAddFrienInfo)
 private:
  inline void set_has_refuse_user_id();
  inline void clear_has_refuse_user_id();
  inline void set_has_resp_time();
  inline void clear_has_resp_time();
  inline void set_has_refuse_reason();
  inline void clear_has_refuse_reason();
  inline void set_has_user_nickname();
  inline void clear_has_user_nickname();
  inline void set_has_user_headlink();
  inline void clear_has_user_headlink();
  inline void set_has_user_gender();
  inline void clear_has_user_gender();
  inline void set_has_user_uid();
  inline void clear_has_user_uid();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 refuse_user_id_;
  ::google::protobuf::uint32 resp_time_;
  ::std::string* refuse_reason_;
  ::std::string* user_nickname_;
  ::std::string* user_headlink_;
  ::google::protobuf::uint32 user_gender_;
  ::google::protobuf::uint32 user_uid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static RefuseAddFrienInfo* default_instance_;
};
// -------------------------------------------------------------------

class AgreeAddFrienInfo : public ::google::protobuf::MessageLite {
 public:
  AgreeAddFrienInfo();
  virtual ~AgreeAddFrienInfo();

  AgreeAddFrienInfo(const AgreeAddFrienInfo& from);

  inline AgreeAddFrienInfo& operator=(const AgreeAddFrienInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const AgreeAddFrienInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const AgreeAddFrienInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(AgreeAddFrienInfo* other);

  // implements Message ----------------------------------------------

  AgreeAddFrienInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AgreeAddFrienInfo& from);
  void MergeFrom(const AgreeAddFrienInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 agree_user_id = 1;
  inline bool has_agree_user_id() const;
  inline void clear_agree_user_id();
  static const int kAgreeUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 agree_user_id() const;
  inline void set_agree_user_id(::google::protobuf::uint32 value);

  // required uint32 resp_time = 2;
  inline bool has_resp_time() const;
  inline void clear_resp_time();
  static const int kRespTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 resp_time() const;
  inline void set_resp_time(::google::protobuf::uint32 value);

  // optional string user_nickname = 6;
  inline bool has_user_nickname() const;
  inline void clear_user_nickname();
  static const int kUserNicknameFieldNumber = 6;
  inline const ::std::string& user_nickname() const;
  inline void set_user_nickname(const ::std::string& value);
  inline void set_user_nickname(const char* value);
  inline void set_user_nickname(const char* value, size_t size);
  inline ::std::string* mutable_user_nickname();
  inline ::std::string* release_user_nickname();
  inline void set_allocated_user_nickname(::std::string* user_nickname);

  // optional string user_headlink = 7;
  inline bool has_user_headlink() const;
  inline void clear_user_headlink();
  static const int kUserHeadlinkFieldNumber = 7;
  inline const ::std::string& user_headlink() const;
  inline void set_user_headlink(const ::std::string& value);
  inline void set_user_headlink(const char* value);
  inline void set_user_headlink(const char* value, size_t size);
  inline ::std::string* mutable_user_headlink();
  inline ::std::string* release_user_headlink();
  inline void set_allocated_user_headlink(::std::string* user_headlink);

  // optional uint32 user_gender = 8;
  inline bool has_user_gender() const;
  inline void clear_user_gender();
  static const int kUserGenderFieldNumber = 8;
  inline ::google::protobuf::uint32 user_gender() const;
  inline void set_user_gender(::google::protobuf::uint32 value);

  // optional uint32 user_uid = 9;
  inline bool has_user_uid() const;
  inline void clear_user_uid();
  static const int kUserUidFieldNumber = 9;
  inline ::google::protobuf::uint32 user_uid() const;
  inline void set_user_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Buddy.AgreeAddFrienInfo)
 private:
  inline void set_has_agree_user_id();
  inline void clear_has_agree_user_id();
  inline void set_has_resp_time();
  inline void clear_has_resp_time();
  inline void set_has_user_nickname();
  inline void clear_has_user_nickname();
  inline void set_has_user_headlink();
  inline void clear_has_user_headlink();
  inline void set_has_user_gender();
  inline void clear_has_user_gender();
  inline void set_has_user_uid();
  inline void clear_has_user_uid();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 agree_user_id_;
  ::google::protobuf::uint32 resp_time_;
  ::std::string* user_nickname_;
  ::std::string* user_headlink_;
  ::google::protobuf::uint32 user_gender_;
  ::google::protobuf::uint32 user_uid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static AgreeAddFrienInfo* default_instance_;
};
// -------------------------------------------------------------------

class IMGetAddFriendRes : public ::google::protobuf::MessageLite {
 public:
  IMGetAddFriendRes();
  virtual ~IMGetAddFriendRes();

  IMGetAddFriendRes(const IMGetAddFriendRes& from);

  inline IMGetAddFriendRes& operator=(const IMGetAddFriendRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGetAddFriendRes& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGetAddFriendRes* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGetAddFriendRes* other);

  // implements Message ----------------------------------------------

  IMGetAddFriendRes* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGetAddFriendRes& from);
  void MergeFrom(const IMGetAddFriendRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // repeated .IM.Buddy.AddFrienInfo addfriend_info_list = 2;
  inline int addfriend_info_list_size() const;
  inline void clear_addfriend_info_list();
  static const int kAddfriendInfoListFieldNumber = 2;
  inline const ::IM::Buddy::AddFrienInfo& addfriend_info_list(int index) const;
  inline ::IM::Buddy::AddFrienInfo* mutable_addfriend_info_list(int index);
  inline ::IM::Buddy::AddFrienInfo* add_addfriend_info_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::Buddy::AddFrienInfo >&
      addfriend_info_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::Buddy::AddFrienInfo >*
      mutable_addfriend_info_list();

  // repeated .IM.Buddy.AgreeAddFrienInfo agree_info_list = 3;
  inline int agree_info_list_size() const;
  inline void clear_agree_info_list();
  static const int kAgreeInfoListFieldNumber = 3;
  inline const ::IM::Buddy::AgreeAddFrienInfo& agree_info_list(int index) const;
  inline ::IM::Buddy::AgreeAddFrienInfo* mutable_agree_info_list(int index);
  inline ::IM::Buddy::AgreeAddFrienInfo* add_agree_info_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::Buddy::AgreeAddFrienInfo >&
      agree_info_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::Buddy::AgreeAddFrienInfo >*
      mutable_agree_info_list();

  // repeated .IM.Buddy.RefuseAddFrienInfo refuse_info_list = 4;
  inline int refuse_info_list_size() const;
  inline void clear_refuse_info_list();
  static const int kRefuseInfoListFieldNumber = 4;
  inline const ::IM::Buddy::RefuseAddFrienInfo& refuse_info_list(int index) const;
  inline ::IM::Buddy::RefuseAddFrienInfo* mutable_refuse_info_list(int index);
  inline ::IM::Buddy::RefuseAddFrienInfo* add_refuse_info_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::Buddy::RefuseAddFrienInfo >&
      refuse_info_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::Buddy::RefuseAddFrienInfo >*
      mutable_refuse_info_list();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMGetAddFriendRes)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::IM::Buddy::AddFrienInfo > addfriend_info_list_;
  ::google::protobuf::RepeatedPtrField< ::IM::Buddy::AgreeAddFrienInfo > agree_info_list_;
  ::google::protobuf::RepeatedPtrField< ::IM::Buddy::RefuseAddFrienInfo > refuse_info_list_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 user_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMGetAddFriendRes* default_instance_;
};
// -------------------------------------------------------------------

class IMFindUserInfoReq : public ::google::protobuf::MessageLite {
 public:
  IMFindUserInfoReq();
  virtual ~IMFindUserInfoReq();

  IMFindUserInfoReq(const IMFindUserInfoReq& from);

  inline IMFindUserInfoReq& operator=(const IMFindUserInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMFindUserInfoReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMFindUserInfoReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMFindUserInfoReq* other);

  // implements Message ----------------------------------------------

  IMFindUserInfoReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMFindUserInfoReq& from);
  void MergeFrom(const IMFindUserInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required string find_string = 2;
  inline bool has_find_string() const;
  inline void clear_find_string();
  static const int kFindStringFieldNumber = 2;
  inline const ::std::string& find_string() const;
  inline void set_find_string(const ::std::string& value);
  inline void set_find_string(const char* value);
  inline void set_find_string(const char* value, size_t size);
  inline ::std::string* mutable_find_string();
  inline ::std::string* release_find_string();
  inline void set_allocated_find_string(::std::string* find_string);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMFindUserInfoReq)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_find_string();
  inline void clear_has_find_string();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* find_string_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 user_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMFindUserInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class IMFindUserInfoRes : public ::google::protobuf::MessageLite {
 public:
  IMFindUserInfoRes();
  virtual ~IMFindUserInfoRes();

  IMFindUserInfoRes(const IMFindUserInfoRes& from);

  inline IMFindUserInfoRes& operator=(const IMFindUserInfoRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMFindUserInfoRes& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMFindUserInfoRes* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMFindUserInfoRes* other);

  // implements Message ----------------------------------------------

  IMFindUserInfoRes* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMFindUserInfoRes& from);
  void MergeFrom(const IMFindUserInfoRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // repeated .IM.BaseDefine.UserInfo userinfo_list = 2;
  inline int userinfo_list_size() const;
  inline void clear_userinfo_list();
  static const int kUserinfoListFieldNumber = 2;
  inline const ::IM::BaseDefine::UserInfo& userinfo_list(int index) const;
  inline ::IM::BaseDefine::UserInfo* mutable_userinfo_list(int index);
  inline ::IM::BaseDefine::UserInfo* add_userinfo_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserInfo >&
      userinfo_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserInfo >*
      mutable_userinfo_list();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMFindUserInfoRes)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserInfo > userinfo_list_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 user_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBuddy_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBuddy_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBuddy_2eproto();

  void InitAsDefaultInstance();
  static IMFindUserInfoRes* default_instance_;
};
// ===================================================================


// ===================================================================

// IMRecentContactSessionReq

// required uint32 user_id = 1;
inline bool IMRecentContactSessionReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMRecentContactSessionReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMRecentContactSessionReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMRecentContactSessionReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMRecentContactSessionReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRecentContactSessionReq.user_id)
  return user_id_;
}
inline void IMRecentContactSessionReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRecentContactSessionReq.user_id)
}

// required uint32 latest_update_time = 2;
inline bool IMRecentContactSessionReq::has_latest_update_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMRecentContactSessionReq::set_has_latest_update_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMRecentContactSessionReq::clear_has_latest_update_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMRecentContactSessionReq::clear_latest_update_time() {
  latest_update_time_ = 0u;
  clear_has_latest_update_time();
}
inline ::google::protobuf::uint32 IMRecentContactSessionReq::latest_update_time() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRecentContactSessionReq.latest_update_time)
  return latest_update_time_;
}
inline void IMRecentContactSessionReq::set_latest_update_time(::google::protobuf::uint32 value) {
  set_has_latest_update_time();
  latest_update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRecentContactSessionReq.latest_update_time)
}

// optional bytes attach_data = 20;
inline bool IMRecentContactSessionReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMRecentContactSessionReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMRecentContactSessionReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMRecentContactSessionReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMRecentContactSessionReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRecentContactSessionReq.attach_data)
  return *attach_data_;
}
inline void IMRecentContactSessionReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRecentContactSessionReq.attach_data)
}
inline void IMRecentContactSessionReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMRecentContactSessionReq.attach_data)
}
inline void IMRecentContactSessionReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMRecentContactSessionReq.attach_data)
}
inline ::std::string* IMRecentContactSessionReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMRecentContactSessionReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMRecentContactSessionReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMRecentContactSessionReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMRecentContactSessionReq.attach_data)
}

// -------------------------------------------------------------------

// IMRecentContactSessionRsp

// required uint32 user_id = 1;
inline bool IMRecentContactSessionRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMRecentContactSessionRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMRecentContactSessionRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMRecentContactSessionRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMRecentContactSessionRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRecentContactSessionRsp.user_id)
  return user_id_;
}
inline void IMRecentContactSessionRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRecentContactSessionRsp.user_id)
}

// repeated .IM.BaseDefine.ContactSessionInfo contact_session_list = 2;
inline int IMRecentContactSessionRsp::contact_session_list_size() const {
  return contact_session_list_.size();
}
inline void IMRecentContactSessionRsp::clear_contact_session_list() {
  contact_session_list_.Clear();
}
inline const ::IM::BaseDefine::ContactSessionInfo& IMRecentContactSessionRsp::contact_session_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRecentContactSessionRsp.contact_session_list)
  return contact_session_list_.Get(index);
}
inline ::IM::BaseDefine::ContactSessionInfo* IMRecentContactSessionRsp::mutable_contact_session_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMRecentContactSessionRsp.contact_session_list)
  return contact_session_list_.Mutable(index);
}
inline ::IM::BaseDefine::ContactSessionInfo* IMRecentContactSessionRsp::add_contact_session_list() {
  // @@protoc_insertion_point(field_add:IM.Buddy.IMRecentContactSessionRsp.contact_session_list)
  return contact_session_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::ContactSessionInfo >&
IMRecentContactSessionRsp::contact_session_list() const {
  // @@protoc_insertion_point(field_list:IM.Buddy.IMRecentContactSessionRsp.contact_session_list)
  return contact_session_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::ContactSessionInfo >*
IMRecentContactSessionRsp::mutable_contact_session_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Buddy.IMRecentContactSessionRsp.contact_session_list)
  return &contact_session_list_;
}

// optional bytes attach_data = 20;
inline bool IMRecentContactSessionRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMRecentContactSessionRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMRecentContactSessionRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMRecentContactSessionRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMRecentContactSessionRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRecentContactSessionRsp.attach_data)
  return *attach_data_;
}
inline void IMRecentContactSessionRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRecentContactSessionRsp.attach_data)
}
inline void IMRecentContactSessionRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMRecentContactSessionRsp.attach_data)
}
inline void IMRecentContactSessionRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMRecentContactSessionRsp.attach_data)
}
inline ::std::string* IMRecentContactSessionRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMRecentContactSessionRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMRecentContactSessionRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMRecentContactSessionRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMRecentContactSessionRsp.attach_data)
}

// -------------------------------------------------------------------

// IMUserStatNotify

// required .IM.BaseDefine.UserStat user_stat = 1;
inline bool IMUserStatNotify::has_user_stat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMUserStatNotify::set_has_user_stat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMUserStatNotify::clear_has_user_stat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMUserStatNotify::clear_user_stat() {
  if (user_stat_ != NULL) user_stat_->::IM::BaseDefine::UserStat::Clear();
  clear_has_user_stat();
}
inline const ::IM::BaseDefine::UserStat& IMUserStatNotify::user_stat() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUserStatNotify.user_stat)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return user_stat_ != NULL ? *user_stat_ : *default_instance().user_stat_;
#else
  return user_stat_ != NULL ? *user_stat_ : *default_instance_->user_stat_;
#endif
}
inline ::IM::BaseDefine::UserStat* IMUserStatNotify::mutable_user_stat() {
  set_has_user_stat();
  if (user_stat_ == NULL) user_stat_ = new ::IM::BaseDefine::UserStat;
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMUserStatNotify.user_stat)
  return user_stat_;
}
inline ::IM::BaseDefine::UserStat* IMUserStatNotify::release_user_stat() {
  clear_has_user_stat();
  ::IM::BaseDefine::UserStat* temp = user_stat_;
  user_stat_ = NULL;
  return temp;
}
inline void IMUserStatNotify::set_allocated_user_stat(::IM::BaseDefine::UserStat* user_stat) {
  delete user_stat_;
  user_stat_ = user_stat;
  if (user_stat) {
    set_has_user_stat();
  } else {
    clear_has_user_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMUserStatNotify.user_stat)
}

// -------------------------------------------------------------------

// IMUsersInfoReq

// required uint32 user_id = 1;
inline bool IMUsersInfoReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMUsersInfoReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMUsersInfoReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMUsersInfoReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMUsersInfoReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUsersInfoReq.user_id)
  return user_id_;
}
inline void IMUsersInfoReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUsersInfoReq.user_id)
}

// repeated uint32 user_id_list = 2;
inline int IMUsersInfoReq::user_id_list_size() const {
  return user_id_list_.size();
}
inline void IMUsersInfoReq::clear_user_id_list() {
  user_id_list_.Clear();
}
inline ::google::protobuf::uint32 IMUsersInfoReq::user_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUsersInfoReq.user_id_list)
  return user_id_list_.Get(index);
}
inline void IMUsersInfoReq::set_user_id_list(int index, ::google::protobuf::uint32 value) {
  user_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUsersInfoReq.user_id_list)
}
inline void IMUsersInfoReq::add_user_id_list(::google::protobuf::uint32 value) {
  user_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Buddy.IMUsersInfoReq.user_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMUsersInfoReq::user_id_list() const {
  // @@protoc_insertion_point(field_list:IM.Buddy.IMUsersInfoReq.user_id_list)
  return user_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMUsersInfoReq::mutable_user_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Buddy.IMUsersInfoReq.user_id_list)
  return &user_id_list_;
}

// optional bytes attach_data = 20;
inline bool IMUsersInfoReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMUsersInfoReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMUsersInfoReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMUsersInfoReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMUsersInfoReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUsersInfoReq.attach_data)
  return *attach_data_;
}
inline void IMUsersInfoReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUsersInfoReq.attach_data)
}
inline void IMUsersInfoReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMUsersInfoReq.attach_data)
}
inline void IMUsersInfoReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMUsersInfoReq.attach_data)
}
inline ::std::string* IMUsersInfoReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMUsersInfoReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMUsersInfoReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMUsersInfoReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMUsersInfoReq.attach_data)
}

// -------------------------------------------------------------------

// IMUsersInfoRsp

// required uint32 user_id = 1;
inline bool IMUsersInfoRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMUsersInfoRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMUsersInfoRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMUsersInfoRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMUsersInfoRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUsersInfoRsp.user_id)
  return user_id_;
}
inline void IMUsersInfoRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUsersInfoRsp.user_id)
}

// repeated .IM.BaseDefine.UserInfo user_info_list = 2;
inline int IMUsersInfoRsp::user_info_list_size() const {
  return user_info_list_.size();
}
inline void IMUsersInfoRsp::clear_user_info_list() {
  user_info_list_.Clear();
}
inline const ::IM::BaseDefine::UserInfo& IMUsersInfoRsp::user_info_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUsersInfoRsp.user_info_list)
  return user_info_list_.Get(index);
}
inline ::IM::BaseDefine::UserInfo* IMUsersInfoRsp::mutable_user_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMUsersInfoRsp.user_info_list)
  return user_info_list_.Mutable(index);
}
inline ::IM::BaseDefine::UserInfo* IMUsersInfoRsp::add_user_info_list() {
  // @@protoc_insertion_point(field_add:IM.Buddy.IMUsersInfoRsp.user_info_list)
  return user_info_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserInfo >&
IMUsersInfoRsp::user_info_list() const {
  // @@protoc_insertion_point(field_list:IM.Buddy.IMUsersInfoRsp.user_info_list)
  return user_info_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserInfo >*
IMUsersInfoRsp::mutable_user_info_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Buddy.IMUsersInfoRsp.user_info_list)
  return &user_info_list_;
}

// optional bytes attach_data = 20;
inline bool IMUsersInfoRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMUsersInfoRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMUsersInfoRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMUsersInfoRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMUsersInfoRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUsersInfoRsp.attach_data)
  return *attach_data_;
}
inline void IMUsersInfoRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUsersInfoRsp.attach_data)
}
inline void IMUsersInfoRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMUsersInfoRsp.attach_data)
}
inline void IMUsersInfoRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMUsersInfoRsp.attach_data)
}
inline ::std::string* IMUsersInfoRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMUsersInfoRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMUsersInfoRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMUsersInfoRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMUsersInfoRsp.attach_data)
}

// -------------------------------------------------------------------

// IMRemoveSessionReq

// required uint32 user_id = 1;
inline bool IMRemoveSessionReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMRemoveSessionReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMRemoveSessionReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMRemoveSessionReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMRemoveSessionReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRemoveSessionReq.user_id)
  return user_id_;
}
inline void IMRemoveSessionReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRemoveSessionReq.user_id)
}

// required .IM.BaseDefine.SessionType session_type = 2;
inline bool IMRemoveSessionReq::has_session_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMRemoveSessionReq::set_has_session_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMRemoveSessionReq::clear_has_session_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMRemoveSessionReq::clear_session_type() {
  session_type_ = 1;
  clear_has_session_type();
}
inline ::IM::BaseDefine::SessionType IMRemoveSessionReq::session_type() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRemoveSessionReq.session_type)
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
inline void IMRemoveSessionReq::set_session_type(::IM::BaseDefine::SessionType value) {
  assert(::IM::BaseDefine::SessionType_IsValid(value));
  set_has_session_type();
  session_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRemoveSessionReq.session_type)
}

// required uint32 session_id = 3;
inline bool IMRemoveSessionReq::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMRemoveSessionReq::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMRemoveSessionReq::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMRemoveSessionReq::clear_session_id() {
  session_id_ = 0u;
  clear_has_session_id();
}
inline ::google::protobuf::uint32 IMRemoveSessionReq::session_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRemoveSessionReq.session_id)
  return session_id_;
}
inline void IMRemoveSessionReq::set_session_id(::google::protobuf::uint32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRemoveSessionReq.session_id)
}

// optional bytes attach_data = 20;
inline bool IMRemoveSessionReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMRemoveSessionReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMRemoveSessionReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMRemoveSessionReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMRemoveSessionReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRemoveSessionReq.attach_data)
  return *attach_data_;
}
inline void IMRemoveSessionReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRemoveSessionReq.attach_data)
}
inline void IMRemoveSessionReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMRemoveSessionReq.attach_data)
}
inline void IMRemoveSessionReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMRemoveSessionReq.attach_data)
}
inline ::std::string* IMRemoveSessionReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMRemoveSessionReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMRemoveSessionReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMRemoveSessionReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMRemoveSessionReq.attach_data)
}

// -------------------------------------------------------------------

// IMRemoveSessionRsp

// required uint32 user_id = 1;
inline bool IMRemoveSessionRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMRemoveSessionRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMRemoveSessionRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMRemoveSessionRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMRemoveSessionRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRemoveSessionRsp.user_id)
  return user_id_;
}
inline void IMRemoveSessionRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRemoveSessionRsp.user_id)
}

// required uint32 result_code = 2;
inline bool IMRemoveSessionRsp::has_result_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMRemoveSessionRsp::set_has_result_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMRemoveSessionRsp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMRemoveSessionRsp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMRemoveSessionRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRemoveSessionRsp.result_code)
  return result_code_;
}
inline void IMRemoveSessionRsp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRemoveSessionRsp.result_code)
}

// required .IM.BaseDefine.SessionType session_type = 3;
inline bool IMRemoveSessionRsp::has_session_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMRemoveSessionRsp::set_has_session_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMRemoveSessionRsp::clear_has_session_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMRemoveSessionRsp::clear_session_type() {
  session_type_ = 1;
  clear_has_session_type();
}
inline ::IM::BaseDefine::SessionType IMRemoveSessionRsp::session_type() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRemoveSessionRsp.session_type)
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
inline void IMRemoveSessionRsp::set_session_type(::IM::BaseDefine::SessionType value) {
  assert(::IM::BaseDefine::SessionType_IsValid(value));
  set_has_session_type();
  session_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRemoveSessionRsp.session_type)
}

// required uint32 session_id = 4;
inline bool IMRemoveSessionRsp::has_session_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMRemoveSessionRsp::set_has_session_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMRemoveSessionRsp::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMRemoveSessionRsp::clear_session_id() {
  session_id_ = 0u;
  clear_has_session_id();
}
inline ::google::protobuf::uint32 IMRemoveSessionRsp::session_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRemoveSessionRsp.session_id)
  return session_id_;
}
inline void IMRemoveSessionRsp::set_session_id(::google::protobuf::uint32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRemoveSessionRsp.session_id)
}

// optional bytes attach_data = 20;
inline bool IMRemoveSessionRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMRemoveSessionRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMRemoveSessionRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMRemoveSessionRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMRemoveSessionRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRemoveSessionRsp.attach_data)
  return *attach_data_;
}
inline void IMRemoveSessionRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRemoveSessionRsp.attach_data)
}
inline void IMRemoveSessionRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMRemoveSessionRsp.attach_data)
}
inline void IMRemoveSessionRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMRemoveSessionRsp.attach_data)
}
inline ::std::string* IMRemoveSessionRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMRemoveSessionRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMRemoveSessionRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMRemoveSessionRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMRemoveSessionRsp.attach_data)
}

// -------------------------------------------------------------------

// IMAllUserReq

// required uint32 user_id = 1;
inline bool IMAllUserReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMAllUserReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMAllUserReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMAllUserReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMAllUserReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAllUserReq.user_id)
  return user_id_;
}
inline void IMAllUserReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAllUserReq.user_id)
}

// required uint32 latest_update_time = 2;
inline bool IMAllUserReq::has_latest_update_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMAllUserReq::set_has_latest_update_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMAllUserReq::clear_has_latest_update_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMAllUserReq::clear_latest_update_time() {
  latest_update_time_ = 0u;
  clear_has_latest_update_time();
}
inline ::google::protobuf::uint32 IMAllUserReq::latest_update_time() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAllUserReq.latest_update_time)
  return latest_update_time_;
}
inline void IMAllUserReq::set_latest_update_time(::google::protobuf::uint32 value) {
  set_has_latest_update_time();
  latest_update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAllUserReq.latest_update_time)
}

// optional bytes attach_data = 20;
inline bool IMAllUserReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMAllUserReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMAllUserReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMAllUserReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMAllUserReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAllUserReq.attach_data)
  return *attach_data_;
}
inline void IMAllUserReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAllUserReq.attach_data)
}
inline void IMAllUserReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMAllUserReq.attach_data)
}
inline void IMAllUserReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMAllUserReq.attach_data)
}
inline ::std::string* IMAllUserReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMAllUserReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMAllUserReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMAllUserReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMAllUserReq.attach_data)
}

// -------------------------------------------------------------------

// IMAllUserRsp

// required uint32 user_id = 1;
inline bool IMAllUserRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMAllUserRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMAllUserRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMAllUserRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMAllUserRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAllUserRsp.user_id)
  return user_id_;
}
inline void IMAllUserRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAllUserRsp.user_id)
}

// required uint32 latest_update_time = 2;
inline bool IMAllUserRsp::has_latest_update_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMAllUserRsp::set_has_latest_update_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMAllUserRsp::clear_has_latest_update_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMAllUserRsp::clear_latest_update_time() {
  latest_update_time_ = 0u;
  clear_has_latest_update_time();
}
inline ::google::protobuf::uint32 IMAllUserRsp::latest_update_time() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAllUserRsp.latest_update_time)
  return latest_update_time_;
}
inline void IMAllUserRsp::set_latest_update_time(::google::protobuf::uint32 value) {
  set_has_latest_update_time();
  latest_update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAllUserRsp.latest_update_time)
}

// repeated .IM.BaseDefine.UserInfo user_list = 3;
inline int IMAllUserRsp::user_list_size() const {
  return user_list_.size();
}
inline void IMAllUserRsp::clear_user_list() {
  user_list_.Clear();
}
inline const ::IM::BaseDefine::UserInfo& IMAllUserRsp::user_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAllUserRsp.user_list)
  return user_list_.Get(index);
}
inline ::IM::BaseDefine::UserInfo* IMAllUserRsp::mutable_user_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMAllUserRsp.user_list)
  return user_list_.Mutable(index);
}
inline ::IM::BaseDefine::UserInfo* IMAllUserRsp::add_user_list() {
  // @@protoc_insertion_point(field_add:IM.Buddy.IMAllUserRsp.user_list)
  return user_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserInfo >&
IMAllUserRsp::user_list() const {
  // @@protoc_insertion_point(field_list:IM.Buddy.IMAllUserRsp.user_list)
  return user_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserInfo >*
IMAllUserRsp::mutable_user_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Buddy.IMAllUserRsp.user_list)
  return &user_list_;
}

// optional bytes attach_data = 20;
inline bool IMAllUserRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMAllUserRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMAllUserRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMAllUserRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMAllUserRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAllUserRsp.attach_data)
  return *attach_data_;
}
inline void IMAllUserRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAllUserRsp.attach_data)
}
inline void IMAllUserRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMAllUserRsp.attach_data)
}
inline void IMAllUserRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMAllUserRsp.attach_data)
}
inline ::std::string* IMAllUserRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMAllUserRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMAllUserRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMAllUserRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMAllUserRsp.attach_data)
}

// -------------------------------------------------------------------

// IMUsersStatReq

// required uint32 user_id = 1;
inline bool IMUsersStatReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMUsersStatReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMUsersStatReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMUsersStatReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMUsersStatReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUsersStatReq.user_id)
  return user_id_;
}
inline void IMUsersStatReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUsersStatReq.user_id)
}

// repeated uint32 user_id_list = 2;
inline int IMUsersStatReq::user_id_list_size() const {
  return user_id_list_.size();
}
inline void IMUsersStatReq::clear_user_id_list() {
  user_id_list_.Clear();
}
inline ::google::protobuf::uint32 IMUsersStatReq::user_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUsersStatReq.user_id_list)
  return user_id_list_.Get(index);
}
inline void IMUsersStatReq::set_user_id_list(int index, ::google::protobuf::uint32 value) {
  user_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUsersStatReq.user_id_list)
}
inline void IMUsersStatReq::add_user_id_list(::google::protobuf::uint32 value) {
  user_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Buddy.IMUsersStatReq.user_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMUsersStatReq::user_id_list() const {
  // @@protoc_insertion_point(field_list:IM.Buddy.IMUsersStatReq.user_id_list)
  return user_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMUsersStatReq::mutable_user_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Buddy.IMUsersStatReq.user_id_list)
  return &user_id_list_;
}

// optional bytes attach_data = 20;
inline bool IMUsersStatReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMUsersStatReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMUsersStatReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMUsersStatReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMUsersStatReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUsersStatReq.attach_data)
  return *attach_data_;
}
inline void IMUsersStatReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUsersStatReq.attach_data)
}
inline void IMUsersStatReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMUsersStatReq.attach_data)
}
inline void IMUsersStatReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMUsersStatReq.attach_data)
}
inline ::std::string* IMUsersStatReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMUsersStatReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMUsersStatReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMUsersStatReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMUsersStatReq.attach_data)
}

// -------------------------------------------------------------------

// IMUsersStatRsp

// required uint32 user_id = 1;
inline bool IMUsersStatRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMUsersStatRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMUsersStatRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMUsersStatRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMUsersStatRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUsersStatRsp.user_id)
  return user_id_;
}
inline void IMUsersStatRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUsersStatRsp.user_id)
}

// repeated .IM.BaseDefine.UserStat user_stat_list = 2;
inline int IMUsersStatRsp::user_stat_list_size() const {
  return user_stat_list_.size();
}
inline void IMUsersStatRsp::clear_user_stat_list() {
  user_stat_list_.Clear();
}
inline const ::IM::BaseDefine::UserStat& IMUsersStatRsp::user_stat_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUsersStatRsp.user_stat_list)
  return user_stat_list_.Get(index);
}
inline ::IM::BaseDefine::UserStat* IMUsersStatRsp::mutable_user_stat_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMUsersStatRsp.user_stat_list)
  return user_stat_list_.Mutable(index);
}
inline ::IM::BaseDefine::UserStat* IMUsersStatRsp::add_user_stat_list() {
  // @@protoc_insertion_point(field_add:IM.Buddy.IMUsersStatRsp.user_stat_list)
  return user_stat_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserStat >&
IMUsersStatRsp::user_stat_list() const {
  // @@protoc_insertion_point(field_list:IM.Buddy.IMUsersStatRsp.user_stat_list)
  return user_stat_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserStat >*
IMUsersStatRsp::mutable_user_stat_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Buddy.IMUsersStatRsp.user_stat_list)
  return &user_stat_list_;
}

// optional bytes attach_data = 20;
inline bool IMUsersStatRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMUsersStatRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMUsersStatRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMUsersStatRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMUsersStatRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUsersStatRsp.attach_data)
  return *attach_data_;
}
inline void IMUsersStatRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUsersStatRsp.attach_data)
}
inline void IMUsersStatRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMUsersStatRsp.attach_data)
}
inline void IMUsersStatRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMUsersStatRsp.attach_data)
}
inline ::std::string* IMUsersStatRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMUsersStatRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMUsersStatRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMUsersStatRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMUsersStatRsp.attach_data)
}

// -------------------------------------------------------------------

// IMChangeAvatarReq

// required uint32 user_id = 1;
inline bool IMChangeAvatarReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMChangeAvatarReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMChangeAvatarReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMChangeAvatarReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMChangeAvatarReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeAvatarReq.user_id)
  return user_id_;
}
inline void IMChangeAvatarReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeAvatarReq.user_id)
}

// required string avatar_url = 2;
inline bool IMChangeAvatarReq::has_avatar_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMChangeAvatarReq::set_has_avatar_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMChangeAvatarReq::clear_has_avatar_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMChangeAvatarReq::clear_avatar_url() {
  if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_->clear();
  }
  clear_has_avatar_url();
}
inline const ::std::string& IMChangeAvatarReq::avatar_url() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeAvatarReq.avatar_url)
  return *avatar_url_;
}
inline void IMChangeAvatarReq::set_avatar_url(const ::std::string& value) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeAvatarReq.avatar_url)
}
inline void IMChangeAvatarReq::set_avatar_url(const char* value) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMChangeAvatarReq.avatar_url)
}
inline void IMChangeAvatarReq::set_avatar_url(const char* value, size_t size) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMChangeAvatarReq.avatar_url)
}
inline ::std::string* IMChangeAvatarReq::mutable_avatar_url() {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMChangeAvatarReq.avatar_url)
  return avatar_url_;
}
inline ::std::string* IMChangeAvatarReq::release_avatar_url() {
  clear_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = avatar_url_;
    avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMChangeAvatarReq::set_allocated_avatar_url(::std::string* avatar_url) {
  if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_url_;
  }
  if (avatar_url) {
    set_has_avatar_url();
    avatar_url_ = avatar_url;
  } else {
    clear_has_avatar_url();
    avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMChangeAvatarReq.avatar_url)
}

// optional bytes attach_data = 20;
inline bool IMChangeAvatarReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMChangeAvatarReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMChangeAvatarReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMChangeAvatarReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMChangeAvatarReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeAvatarReq.attach_data)
  return *attach_data_;
}
inline void IMChangeAvatarReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeAvatarReq.attach_data)
}
inline void IMChangeAvatarReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMChangeAvatarReq.attach_data)
}
inline void IMChangeAvatarReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMChangeAvatarReq.attach_data)
}
inline ::std::string* IMChangeAvatarReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMChangeAvatarReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMChangeAvatarReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMChangeAvatarReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMChangeAvatarReq.attach_data)
}

// -------------------------------------------------------------------

// IMChangeAvatarRsp

// required uint32 user_id = 1;
inline bool IMChangeAvatarRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMChangeAvatarRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMChangeAvatarRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMChangeAvatarRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMChangeAvatarRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeAvatarRsp.user_id)
  return user_id_;
}
inline void IMChangeAvatarRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeAvatarRsp.user_id)
}

// required string avatar_url = 2;
inline bool IMChangeAvatarRsp::has_avatar_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMChangeAvatarRsp::set_has_avatar_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMChangeAvatarRsp::clear_has_avatar_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMChangeAvatarRsp::clear_avatar_url() {
  if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_->clear();
  }
  clear_has_avatar_url();
}
inline const ::std::string& IMChangeAvatarRsp::avatar_url() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeAvatarRsp.avatar_url)
  return *avatar_url_;
}
inline void IMChangeAvatarRsp::set_avatar_url(const ::std::string& value) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeAvatarRsp.avatar_url)
}
inline void IMChangeAvatarRsp::set_avatar_url(const char* value) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMChangeAvatarRsp.avatar_url)
}
inline void IMChangeAvatarRsp::set_avatar_url(const char* value, size_t size) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMChangeAvatarRsp.avatar_url)
}
inline ::std::string* IMChangeAvatarRsp::mutable_avatar_url() {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMChangeAvatarRsp.avatar_url)
  return avatar_url_;
}
inline ::std::string* IMChangeAvatarRsp::release_avatar_url() {
  clear_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = avatar_url_;
    avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMChangeAvatarRsp::set_allocated_avatar_url(::std::string* avatar_url) {
  if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_url_;
  }
  if (avatar_url) {
    set_has_avatar_url();
    avatar_url_ = avatar_url;
  } else {
    clear_has_avatar_url();
    avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMChangeAvatarRsp.avatar_url)
}

// required uint32 result_code = 3;
inline bool IMChangeAvatarRsp::has_result_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMChangeAvatarRsp::set_has_result_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMChangeAvatarRsp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMChangeAvatarRsp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMChangeAvatarRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeAvatarRsp.result_code)
  return result_code_;
}
inline void IMChangeAvatarRsp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeAvatarRsp.result_code)
}

// optional bytes attach_data = 20;
inline bool IMChangeAvatarRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMChangeAvatarRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMChangeAvatarRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMChangeAvatarRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMChangeAvatarRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeAvatarRsp.attach_data)
  return *attach_data_;
}
inline void IMChangeAvatarRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeAvatarRsp.attach_data)
}
inline void IMChangeAvatarRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMChangeAvatarRsp.attach_data)
}
inline void IMChangeAvatarRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMChangeAvatarRsp.attach_data)
}
inline ::std::string* IMChangeAvatarRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMChangeAvatarRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMChangeAvatarRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMChangeAvatarRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMChangeAvatarRsp.attach_data)
}

// -------------------------------------------------------------------

// IMPCLoginStatusNotify

// required uint32 user_id = 1;
inline bool IMPCLoginStatusNotify::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMPCLoginStatusNotify::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMPCLoginStatusNotify::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMPCLoginStatusNotify::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMPCLoginStatusNotify::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMPCLoginStatusNotify.user_id)
  return user_id_;
}
inline void IMPCLoginStatusNotify::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMPCLoginStatusNotify.user_id)
}

// required .IM.BaseDefine.UserStatType login_stat = 2;
inline bool IMPCLoginStatusNotify::has_login_stat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMPCLoginStatusNotify::set_has_login_stat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMPCLoginStatusNotify::clear_has_login_stat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMPCLoginStatusNotify::clear_login_stat() {
  login_stat_ = 1;
  clear_has_login_stat();
}
inline ::IM::BaseDefine::UserStatType IMPCLoginStatusNotify::login_stat() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMPCLoginStatusNotify.login_stat)
  return static_cast< ::IM::BaseDefine::UserStatType >(login_stat_);
}
inline void IMPCLoginStatusNotify::set_login_stat(::IM::BaseDefine::UserStatType value) {
  assert(::IM::BaseDefine::UserStatType_IsValid(value));
  set_has_login_stat();
  login_stat_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMPCLoginStatusNotify.login_stat)
}

// -------------------------------------------------------------------

// IMRemoveSessionNotify

// required uint32 user_id = 1;
inline bool IMRemoveSessionNotify::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMRemoveSessionNotify::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMRemoveSessionNotify::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMRemoveSessionNotify::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMRemoveSessionNotify::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRemoveSessionNotify.user_id)
  return user_id_;
}
inline void IMRemoveSessionNotify::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRemoveSessionNotify.user_id)
}

// required .IM.BaseDefine.SessionType session_type = 2;
inline bool IMRemoveSessionNotify::has_session_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMRemoveSessionNotify::set_has_session_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMRemoveSessionNotify::clear_has_session_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMRemoveSessionNotify::clear_session_type() {
  session_type_ = 1;
  clear_has_session_type();
}
inline ::IM::BaseDefine::SessionType IMRemoveSessionNotify::session_type() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRemoveSessionNotify.session_type)
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
inline void IMRemoveSessionNotify::set_session_type(::IM::BaseDefine::SessionType value) {
  assert(::IM::BaseDefine::SessionType_IsValid(value));
  set_has_session_type();
  session_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRemoveSessionNotify.session_type)
}

// required uint32 session_id = 3;
inline bool IMRemoveSessionNotify::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMRemoveSessionNotify::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMRemoveSessionNotify::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMRemoveSessionNotify::clear_session_id() {
  session_id_ = 0u;
  clear_has_session_id();
}
inline ::google::protobuf::uint32 IMRemoveSessionNotify::session_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRemoveSessionNotify.session_id)
  return session_id_;
}
inline void IMRemoveSessionNotify::set_session_id(::google::protobuf::uint32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRemoveSessionNotify.session_id)
}

// -------------------------------------------------------------------

// IMDepartmentReq

// required uint32 user_id = 1;
inline bool IMDepartmentReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMDepartmentReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMDepartmentReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMDepartmentReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMDepartmentReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDepartmentReq.user_id)
  return user_id_;
}
inline void IMDepartmentReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDepartmentReq.user_id)
}

// required uint32 latest_update_time = 2;
inline bool IMDepartmentReq::has_latest_update_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMDepartmentReq::set_has_latest_update_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMDepartmentReq::clear_has_latest_update_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMDepartmentReq::clear_latest_update_time() {
  latest_update_time_ = 0u;
  clear_has_latest_update_time();
}
inline ::google::protobuf::uint32 IMDepartmentReq::latest_update_time() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDepartmentReq.latest_update_time)
  return latest_update_time_;
}
inline void IMDepartmentReq::set_latest_update_time(::google::protobuf::uint32 value) {
  set_has_latest_update_time();
  latest_update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDepartmentReq.latest_update_time)
}

// optional bytes attach_data = 20;
inline bool IMDepartmentReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMDepartmentReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMDepartmentReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMDepartmentReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMDepartmentReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDepartmentReq.attach_data)
  return *attach_data_;
}
inline void IMDepartmentReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDepartmentReq.attach_data)
}
inline void IMDepartmentReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMDepartmentReq.attach_data)
}
inline void IMDepartmentReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMDepartmentReq.attach_data)
}
inline ::std::string* IMDepartmentReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMDepartmentReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMDepartmentReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMDepartmentReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMDepartmentReq.attach_data)
}

// -------------------------------------------------------------------

// IMDepartmentRsp

// required uint32 user_id = 1;
inline bool IMDepartmentRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMDepartmentRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMDepartmentRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMDepartmentRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMDepartmentRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDepartmentRsp.user_id)
  return user_id_;
}
inline void IMDepartmentRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDepartmentRsp.user_id)
}

// required uint32 latest_update_time = 2;
inline bool IMDepartmentRsp::has_latest_update_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMDepartmentRsp::set_has_latest_update_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMDepartmentRsp::clear_has_latest_update_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMDepartmentRsp::clear_latest_update_time() {
  latest_update_time_ = 0u;
  clear_has_latest_update_time();
}
inline ::google::protobuf::uint32 IMDepartmentRsp::latest_update_time() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDepartmentRsp.latest_update_time)
  return latest_update_time_;
}
inline void IMDepartmentRsp::set_latest_update_time(::google::protobuf::uint32 value) {
  set_has_latest_update_time();
  latest_update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDepartmentRsp.latest_update_time)
}

// repeated .IM.BaseDefine.DepartInfo dept_list = 3;
inline int IMDepartmentRsp::dept_list_size() const {
  return dept_list_.size();
}
inline void IMDepartmentRsp::clear_dept_list() {
  dept_list_.Clear();
}
inline const ::IM::BaseDefine::DepartInfo& IMDepartmentRsp::dept_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDepartmentRsp.dept_list)
  return dept_list_.Get(index);
}
inline ::IM::BaseDefine::DepartInfo* IMDepartmentRsp::mutable_dept_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMDepartmentRsp.dept_list)
  return dept_list_.Mutable(index);
}
inline ::IM::BaseDefine::DepartInfo* IMDepartmentRsp::add_dept_list() {
  // @@protoc_insertion_point(field_add:IM.Buddy.IMDepartmentRsp.dept_list)
  return dept_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::DepartInfo >&
IMDepartmentRsp::dept_list() const {
  // @@protoc_insertion_point(field_list:IM.Buddy.IMDepartmentRsp.dept_list)
  return dept_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::DepartInfo >*
IMDepartmentRsp::mutable_dept_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Buddy.IMDepartmentRsp.dept_list)
  return &dept_list_;
}

// optional bytes attach_data = 20;
inline bool IMDepartmentRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMDepartmentRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMDepartmentRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMDepartmentRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMDepartmentRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDepartmentRsp.attach_data)
  return *attach_data_;
}
inline void IMDepartmentRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDepartmentRsp.attach_data)
}
inline void IMDepartmentRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMDepartmentRsp.attach_data)
}
inline void IMDepartmentRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMDepartmentRsp.attach_data)
}
inline ::std::string* IMDepartmentRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMDepartmentRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMDepartmentRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMDepartmentRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMDepartmentRsp.attach_data)
}

// -------------------------------------------------------------------

// IMAddFriendReq

// required uint32 from_user_id = 1;
inline bool IMAddFriendReq::has_from_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMAddFriendReq::set_has_from_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMAddFriendReq::clear_has_from_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMAddFriendReq::clear_from_user_id() {
  from_user_id_ = 0u;
  clear_has_from_user_id();
}
inline ::google::protobuf::uint32 IMAddFriendReq::from_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAddFriendReq.from_user_id)
  return from_user_id_;
}
inline void IMAddFriendReq::set_from_user_id(::google::protobuf::uint32 value) {
  set_has_from_user_id();
  from_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAddFriendReq.from_user_id)
}

// required uint32 to_user_id = 2;
inline bool IMAddFriendReq::has_to_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMAddFriendReq::set_has_to_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMAddFriendReq::clear_has_to_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMAddFriendReq::clear_to_user_id() {
  to_user_id_ = 0u;
  clear_has_to_user_id();
}
inline ::google::protobuf::uint32 IMAddFriendReq::to_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAddFriendReq.to_user_id)
  return to_user_id_;
}
inline void IMAddFriendReq::set_to_user_id(::google::protobuf::uint32 value) {
  set_has_to_user_id();
  to_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAddFriendReq.to_user_id)
}

// optional uint32 friend_groupid = 3;
inline bool IMAddFriendReq::has_friend_groupid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMAddFriendReq::set_has_friend_groupid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMAddFriendReq::clear_has_friend_groupid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMAddFriendReq::clear_friend_groupid() {
  friend_groupid_ = 0u;
  clear_has_friend_groupid();
}
inline ::google::protobuf::uint32 IMAddFriendReq::friend_groupid() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAddFriendReq.friend_groupid)
  return friend_groupid_;
}
inline void IMAddFriendReq::set_friend_groupid(::google::protobuf::uint32 value) {
  set_has_friend_groupid();
  friend_groupid_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAddFriendReq.friend_groupid)
}

// optional string friend_remark = 4;
inline bool IMAddFriendReq::has_friend_remark() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMAddFriendReq::set_has_friend_remark() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMAddFriendReq::clear_has_friend_remark() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMAddFriendReq::clear_friend_remark() {
  if (friend_remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_remark_->clear();
  }
  clear_has_friend_remark();
}
inline const ::std::string& IMAddFriendReq::friend_remark() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAddFriendReq.friend_remark)
  return *friend_remark_;
}
inline void IMAddFriendReq::set_friend_remark(const ::std::string& value) {
  set_has_friend_remark();
  if (friend_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_remark_ = new ::std::string;
  }
  friend_remark_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAddFriendReq.friend_remark)
}
inline void IMAddFriendReq::set_friend_remark(const char* value) {
  set_has_friend_remark();
  if (friend_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_remark_ = new ::std::string;
  }
  friend_remark_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMAddFriendReq.friend_remark)
}
inline void IMAddFriendReq::set_friend_remark(const char* value, size_t size) {
  set_has_friend_remark();
  if (friend_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_remark_ = new ::std::string;
  }
  friend_remark_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMAddFriendReq.friend_remark)
}
inline ::std::string* IMAddFriendReq::mutable_friend_remark() {
  set_has_friend_remark();
  if (friend_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_remark_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMAddFriendReq.friend_remark)
  return friend_remark_;
}
inline ::std::string* IMAddFriendReq::release_friend_remark() {
  clear_has_friend_remark();
  if (friend_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = friend_remark_;
    friend_remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMAddFriendReq::set_allocated_friend_remark(::std::string* friend_remark) {
  if (friend_remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete friend_remark_;
  }
  if (friend_remark) {
    set_has_friend_remark();
    friend_remark_ = friend_remark;
  } else {
    clear_has_friend_remark();
    friend_remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMAddFriendReq.friend_remark)
}

// optional string extra_info = 5;
inline bool IMAddFriendReq::has_extra_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMAddFriendReq::set_has_extra_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMAddFriendReq::clear_has_extra_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMAddFriendReq::clear_extra_info() {
  if (extra_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extra_info_->clear();
  }
  clear_has_extra_info();
}
inline const ::std::string& IMAddFriendReq::extra_info() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAddFriendReq.extra_info)
  return *extra_info_;
}
inline void IMAddFriendReq::set_extra_info(const ::std::string& value) {
  set_has_extra_info();
  if (extra_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extra_info_ = new ::std::string;
  }
  extra_info_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAddFriendReq.extra_info)
}
inline void IMAddFriendReq::set_extra_info(const char* value) {
  set_has_extra_info();
  if (extra_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extra_info_ = new ::std::string;
  }
  extra_info_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMAddFriendReq.extra_info)
}
inline void IMAddFriendReq::set_extra_info(const char* value, size_t size) {
  set_has_extra_info();
  if (extra_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extra_info_ = new ::std::string;
  }
  extra_info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMAddFriendReq.extra_info)
}
inline ::std::string* IMAddFriendReq::mutable_extra_info() {
  set_has_extra_info();
  if (extra_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extra_info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMAddFriendReq.extra_info)
  return extra_info_;
}
inline ::std::string* IMAddFriendReq::release_extra_info() {
  clear_has_extra_info();
  if (extra_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = extra_info_;
    extra_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMAddFriendReq::set_allocated_extra_info(::std::string* extra_info) {
  if (extra_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extra_info_;
  }
  if (extra_info) {
    set_has_extra_info();
    extra_info_ = extra_info;
  } else {
    clear_has_extra_info();
    extra_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMAddFriendReq.extra_info)
}

// optional string user_nickname = 6;
inline bool IMAddFriendReq::has_user_nickname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMAddFriendReq::set_has_user_nickname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMAddFriendReq::clear_has_user_nickname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMAddFriendReq::clear_user_nickname() {
  if (user_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_->clear();
  }
  clear_has_user_nickname();
}
inline const ::std::string& IMAddFriendReq::user_nickname() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAddFriendReq.user_nickname)
  return *user_nickname_;
}
inline void IMAddFriendReq::set_user_nickname(const ::std::string& value) {
  set_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_ = new ::std::string;
  }
  user_nickname_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAddFriendReq.user_nickname)
}
inline void IMAddFriendReq::set_user_nickname(const char* value) {
  set_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_ = new ::std::string;
  }
  user_nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMAddFriendReq.user_nickname)
}
inline void IMAddFriendReq::set_user_nickname(const char* value, size_t size) {
  set_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_ = new ::std::string;
  }
  user_nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMAddFriendReq.user_nickname)
}
inline ::std::string* IMAddFriendReq::mutable_user_nickname() {
  set_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMAddFriendReq.user_nickname)
  return user_nickname_;
}
inline ::std::string* IMAddFriendReq::release_user_nickname() {
  clear_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_nickname_;
    user_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMAddFriendReq::set_allocated_user_nickname(::std::string* user_nickname) {
  if (user_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_nickname_;
  }
  if (user_nickname) {
    set_has_user_nickname();
    user_nickname_ = user_nickname;
  } else {
    clear_has_user_nickname();
    user_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMAddFriendReq.user_nickname)
}

// optional string user_headlink = 7;
inline bool IMAddFriendReq::has_user_headlink() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMAddFriendReq::set_has_user_headlink() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMAddFriendReq::clear_has_user_headlink() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMAddFriendReq::clear_user_headlink() {
  if (user_headlink_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_headlink_->clear();
  }
  clear_has_user_headlink();
}
inline const ::std::string& IMAddFriendReq::user_headlink() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAddFriendReq.user_headlink)
  return *user_headlink_;
}
inline void IMAddFriendReq::set_user_headlink(const ::std::string& value) {
  set_has_user_headlink();
  if (user_headlink_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_headlink_ = new ::std::string;
  }
  user_headlink_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAddFriendReq.user_headlink)
}
inline void IMAddFriendReq::set_user_headlink(const char* value) {
  set_has_user_headlink();
  if (user_headlink_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_headlink_ = new ::std::string;
  }
  user_headlink_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMAddFriendReq.user_headlink)
}
inline void IMAddFriendReq::set_user_headlink(const char* value, size_t size) {
  set_has_user_headlink();
  if (user_headlink_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_headlink_ = new ::std::string;
  }
  user_headlink_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMAddFriendReq.user_headlink)
}
inline ::std::string* IMAddFriendReq::mutable_user_headlink() {
  set_has_user_headlink();
  if (user_headlink_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_headlink_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMAddFriendReq.user_headlink)
  return user_headlink_;
}
inline ::std::string* IMAddFriendReq::release_user_headlink() {
  clear_has_user_headlink();
  if (user_headlink_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_headlink_;
    user_headlink_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMAddFriendReq::set_allocated_user_headlink(::std::string* user_headlink) {
  if (user_headlink_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_headlink_;
  }
  if (user_headlink) {
    set_has_user_headlink();
    user_headlink_ = user_headlink;
  } else {
    clear_has_user_headlink();
    user_headlink_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMAddFriendReq.user_headlink)
}

// optional uint32 user_gender = 8;
inline bool IMAddFriendReq::has_user_gender() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMAddFriendReq::set_has_user_gender() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMAddFriendReq::clear_has_user_gender() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMAddFriendReq::clear_user_gender() {
  user_gender_ = 0u;
  clear_has_user_gender();
}
inline ::google::protobuf::uint32 IMAddFriendReq::user_gender() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAddFriendReq.user_gender)
  return user_gender_;
}
inline void IMAddFriendReq::set_user_gender(::google::protobuf::uint32 value) {
  set_has_user_gender();
  user_gender_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAddFriendReq.user_gender)
}

// optional uint32 user_uid = 9;
inline bool IMAddFriendReq::has_user_uid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IMAddFriendReq::set_has_user_uid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IMAddFriendReq::clear_has_user_uid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IMAddFriendReq::clear_user_uid() {
  user_uid_ = 0u;
  clear_has_user_uid();
}
inline ::google::protobuf::uint32 IMAddFriendReq::user_uid() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAddFriendReq.user_uid)
  return user_uid_;
}
inline void IMAddFriendReq::set_user_uid(::google::protobuf::uint32 value) {
  set_has_user_uid();
  user_uid_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAddFriendReq.user_uid)
}

// optional bytes attach_data = 20;
inline bool IMAddFriendReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IMAddFriendReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IMAddFriendReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IMAddFriendReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMAddFriendReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAddFriendReq.attach_data)
  return *attach_data_;
}
inline void IMAddFriendReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAddFriendReq.attach_data)
}
inline void IMAddFriendReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMAddFriendReq.attach_data)
}
inline void IMAddFriendReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMAddFriendReq.attach_data)
}
inline ::std::string* IMAddFriendReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMAddFriendReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMAddFriendReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMAddFriendReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMAddFriendReq.attach_data)
}

// -------------------------------------------------------------------

// IMAddFriendRes

// required uint32 user_id = 1;
inline bool IMAddFriendRes::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMAddFriendRes::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMAddFriendRes::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMAddFriendRes::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMAddFriendRes::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAddFriendRes.user_id)
  return user_id_;
}
inline void IMAddFriendRes::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAddFriendRes.user_id)
}

// required uint32 result_code = 2;
inline bool IMAddFriendRes::has_result_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMAddFriendRes::set_has_result_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMAddFriendRes::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMAddFriendRes::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMAddFriendRes::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAddFriendRes.result_code)
  return result_code_;
}
inline void IMAddFriendRes::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAddFriendRes.result_code)
}

// optional bytes attach_data = 20;
inline bool IMAddFriendRes::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMAddFriendRes::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMAddFriendRes::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMAddFriendRes::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMAddFriendRes::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAddFriendRes.attach_data)
  return *attach_data_;
}
inline void IMAddFriendRes::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAddFriendRes.attach_data)
}
inline void IMAddFriendRes::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMAddFriendRes.attach_data)
}
inline void IMAddFriendRes::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMAddFriendRes.attach_data)
}
inline ::std::string* IMAddFriendRes::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMAddFriendRes.attach_data)
  return attach_data_;
}
inline ::std::string* IMAddFriendRes::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMAddFriendRes::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMAddFriendRes.attach_data)
}

// -------------------------------------------------------------------

// IMReverseAddFriendReq

// required uint32 from_user_id = 1;
inline bool IMReverseAddFriendReq::has_from_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMReverseAddFriendReq::set_has_from_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMReverseAddFriendReq::clear_has_from_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMReverseAddFriendReq::clear_from_user_id() {
  from_user_id_ = 0u;
  clear_has_from_user_id();
}
inline ::google::protobuf::uint32 IMReverseAddFriendReq::from_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMReverseAddFriendReq.from_user_id)
  return from_user_id_;
}
inline void IMReverseAddFriendReq::set_from_user_id(::google::protobuf::uint32 value) {
  set_has_from_user_id();
  from_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMReverseAddFriendReq.from_user_id)
}

// required uint32 to_user_id = 2;
inline bool IMReverseAddFriendReq::has_to_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMReverseAddFriendReq::set_has_to_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMReverseAddFriendReq::clear_has_to_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMReverseAddFriendReq::clear_to_user_id() {
  to_user_id_ = 0u;
  clear_has_to_user_id();
}
inline ::google::protobuf::uint32 IMReverseAddFriendReq::to_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMReverseAddFriendReq.to_user_id)
  return to_user_id_;
}
inline void IMReverseAddFriendReq::set_to_user_id(::google::protobuf::uint32 value) {
  set_has_to_user_id();
  to_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMReverseAddFriendReq.to_user_id)
}

// required .IM.BaseDefine.FriendResStatusType friendres_status_type = 3;
inline bool IMReverseAddFriendReq::has_friendres_status_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMReverseAddFriendReq::set_has_friendres_status_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMReverseAddFriendReq::clear_has_friendres_status_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMReverseAddFriendReq::clear_friendres_status_type() {
  friendres_status_type_ = 0;
  clear_has_friendres_status_type();
}
inline ::IM::BaseDefine::FriendResStatusType IMReverseAddFriendReq::friendres_status_type() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMReverseAddFriendReq.friendres_status_type)
  return static_cast< ::IM::BaseDefine::FriendResStatusType >(friendres_status_type_);
}
inline void IMReverseAddFriendReq::set_friendres_status_type(::IM::BaseDefine::FriendResStatusType value) {
  assert(::IM::BaseDefine::FriendResStatusType_IsValid(value));
  set_has_friendres_status_type();
  friendres_status_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMReverseAddFriendReq.friendres_status_type)
}

// optional uint32 friend_groupid = 4;
inline bool IMReverseAddFriendReq::has_friend_groupid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMReverseAddFriendReq::set_has_friend_groupid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMReverseAddFriendReq::clear_has_friend_groupid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMReverseAddFriendReq::clear_friend_groupid() {
  friend_groupid_ = 0u;
  clear_has_friend_groupid();
}
inline ::google::protobuf::uint32 IMReverseAddFriendReq::friend_groupid() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMReverseAddFriendReq.friend_groupid)
  return friend_groupid_;
}
inline void IMReverseAddFriendReq::set_friend_groupid(::google::protobuf::uint32 value) {
  set_has_friend_groupid();
  friend_groupid_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMReverseAddFriendReq.friend_groupid)
}

// optional string friend_remark = 5;
inline bool IMReverseAddFriendReq::has_friend_remark() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMReverseAddFriendReq::set_has_friend_remark() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMReverseAddFriendReq::clear_has_friend_remark() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMReverseAddFriendReq::clear_friend_remark() {
  if (friend_remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_remark_->clear();
  }
  clear_has_friend_remark();
}
inline const ::std::string& IMReverseAddFriendReq::friend_remark() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMReverseAddFriendReq.friend_remark)
  return *friend_remark_;
}
inline void IMReverseAddFriendReq::set_friend_remark(const ::std::string& value) {
  set_has_friend_remark();
  if (friend_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_remark_ = new ::std::string;
  }
  friend_remark_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMReverseAddFriendReq.friend_remark)
}
inline void IMReverseAddFriendReq::set_friend_remark(const char* value) {
  set_has_friend_remark();
  if (friend_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_remark_ = new ::std::string;
  }
  friend_remark_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMReverseAddFriendReq.friend_remark)
}
inline void IMReverseAddFriendReq::set_friend_remark(const char* value, size_t size) {
  set_has_friend_remark();
  if (friend_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_remark_ = new ::std::string;
  }
  friend_remark_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMReverseAddFriendReq.friend_remark)
}
inline ::std::string* IMReverseAddFriendReq::mutable_friend_remark() {
  set_has_friend_remark();
  if (friend_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_remark_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMReverseAddFriendReq.friend_remark)
  return friend_remark_;
}
inline ::std::string* IMReverseAddFriendReq::release_friend_remark() {
  clear_has_friend_remark();
  if (friend_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = friend_remark_;
    friend_remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMReverseAddFriendReq::set_allocated_friend_remark(::std::string* friend_remark) {
  if (friend_remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete friend_remark_;
  }
  if (friend_remark) {
    set_has_friend_remark();
    friend_remark_ = friend_remark;
  } else {
    clear_has_friend_remark();
    friend_remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMReverseAddFriendReq.friend_remark)
}

// optional string refuse_reason = 10;
inline bool IMReverseAddFriendReq::has_refuse_reason() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMReverseAddFriendReq::set_has_refuse_reason() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMReverseAddFriendReq::clear_has_refuse_reason() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMReverseAddFriendReq::clear_refuse_reason() {
  if (refuse_reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    refuse_reason_->clear();
  }
  clear_has_refuse_reason();
}
inline const ::std::string& IMReverseAddFriendReq::refuse_reason() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMReverseAddFriendReq.refuse_reason)
  return *refuse_reason_;
}
inline void IMReverseAddFriendReq::set_refuse_reason(const ::std::string& value) {
  set_has_refuse_reason();
  if (refuse_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    refuse_reason_ = new ::std::string;
  }
  refuse_reason_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMReverseAddFriendReq.refuse_reason)
}
inline void IMReverseAddFriendReq::set_refuse_reason(const char* value) {
  set_has_refuse_reason();
  if (refuse_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    refuse_reason_ = new ::std::string;
  }
  refuse_reason_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMReverseAddFriendReq.refuse_reason)
}
inline void IMReverseAddFriendReq::set_refuse_reason(const char* value, size_t size) {
  set_has_refuse_reason();
  if (refuse_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    refuse_reason_ = new ::std::string;
  }
  refuse_reason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMReverseAddFriendReq.refuse_reason)
}
inline ::std::string* IMReverseAddFriendReq::mutable_refuse_reason() {
  set_has_refuse_reason();
  if (refuse_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    refuse_reason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMReverseAddFriendReq.refuse_reason)
  return refuse_reason_;
}
inline ::std::string* IMReverseAddFriendReq::release_refuse_reason() {
  clear_has_refuse_reason();
  if (refuse_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = refuse_reason_;
    refuse_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMReverseAddFriendReq::set_allocated_refuse_reason(::std::string* refuse_reason) {
  if (refuse_reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete refuse_reason_;
  }
  if (refuse_reason) {
    set_has_refuse_reason();
    refuse_reason_ = refuse_reason;
  } else {
    clear_has_refuse_reason();
    refuse_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMReverseAddFriendReq.refuse_reason)
}

// optional bytes attach_data = 20;
inline bool IMReverseAddFriendReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMReverseAddFriendReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMReverseAddFriendReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMReverseAddFriendReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMReverseAddFriendReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMReverseAddFriendReq.attach_data)
  return *attach_data_;
}
inline void IMReverseAddFriendReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMReverseAddFriendReq.attach_data)
}
inline void IMReverseAddFriendReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMReverseAddFriendReq.attach_data)
}
inline void IMReverseAddFriendReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMReverseAddFriendReq.attach_data)
}
inline ::std::string* IMReverseAddFriendReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMReverseAddFriendReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMReverseAddFriendReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMReverseAddFriendReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMReverseAddFriendReq.attach_data)
}

// -------------------------------------------------------------------

// IMReverseAddFriendRes

// required uint32 user_id = 1;
inline bool IMReverseAddFriendRes::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMReverseAddFriendRes::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMReverseAddFriendRes::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMReverseAddFriendRes::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMReverseAddFriendRes::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMReverseAddFriendRes.user_id)
  return user_id_;
}
inline void IMReverseAddFriendRes::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMReverseAddFriendRes.user_id)
}

// required uint32 result_code = 2;
inline bool IMReverseAddFriendRes::has_result_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMReverseAddFriendRes::set_has_result_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMReverseAddFriendRes::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMReverseAddFriendRes::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMReverseAddFriendRes::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMReverseAddFriendRes.result_code)
  return result_code_;
}
inline void IMReverseAddFriendRes::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMReverseAddFriendRes.result_code)
}

// optional uint32 friend_id = 10;
inline bool IMReverseAddFriendRes::has_friend_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMReverseAddFriendRes::set_has_friend_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMReverseAddFriendRes::clear_has_friend_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMReverseAddFriendRes::clear_friend_id() {
  friend_id_ = 0u;
  clear_has_friend_id();
}
inline ::google::protobuf::uint32 IMReverseAddFriendRes::friend_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMReverseAddFriendRes.friend_id)
  return friend_id_;
}
inline void IMReverseAddFriendRes::set_friend_id(::google::protobuf::uint32 value) {
  set_has_friend_id();
  friend_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMReverseAddFriendRes.friend_id)
}

// optional bytes attach_data = 20;
inline bool IMReverseAddFriendRes::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMReverseAddFriendRes::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMReverseAddFriendRes::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMReverseAddFriendRes::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMReverseAddFriendRes::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMReverseAddFriendRes.attach_data)
  return *attach_data_;
}
inline void IMReverseAddFriendRes::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMReverseAddFriendRes.attach_data)
}
inline void IMReverseAddFriendRes::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMReverseAddFriendRes.attach_data)
}
inline void IMReverseAddFriendRes::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMReverseAddFriendRes.attach_data)
}
inline ::std::string* IMReverseAddFriendRes::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMReverseAddFriendRes.attach_data)
  return attach_data_;
}
inline ::std::string* IMReverseAddFriendRes::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMReverseAddFriendRes::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMReverseAddFriendRes.attach_data)
}

// -------------------------------------------------------------------

// IMDelFriendReq

// required uint32 user_id = 1;
inline bool IMDelFriendReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMDelFriendReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMDelFriendReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMDelFriendReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMDelFriendReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDelFriendReq.user_id)
  return user_id_;
}
inline void IMDelFriendReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDelFriendReq.user_id)
}

// required uint32 del_user_id = 2;
inline bool IMDelFriendReq::has_del_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMDelFriendReq::set_has_del_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMDelFriendReq::clear_has_del_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMDelFriendReq::clear_del_user_id() {
  del_user_id_ = 0u;
  clear_has_del_user_id();
}
inline ::google::protobuf::uint32 IMDelFriendReq::del_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDelFriendReq.del_user_id)
  return del_user_id_;
}
inline void IMDelFriendReq::set_del_user_id(::google::protobuf::uint32 value) {
  set_has_del_user_id();
  del_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDelFriendReq.del_user_id)
}

// optional bytes attach_data = 20;
inline bool IMDelFriendReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMDelFriendReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMDelFriendReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMDelFriendReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMDelFriendReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDelFriendReq.attach_data)
  return *attach_data_;
}
inline void IMDelFriendReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDelFriendReq.attach_data)
}
inline void IMDelFriendReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMDelFriendReq.attach_data)
}
inline void IMDelFriendReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMDelFriendReq.attach_data)
}
inline ::std::string* IMDelFriendReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMDelFriendReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMDelFriendReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMDelFriendReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMDelFriendReq.attach_data)
}

// -------------------------------------------------------------------

// IMDelFriendRes

// required uint32 user_id = 1;
inline bool IMDelFriendRes::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMDelFriendRes::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMDelFriendRes::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMDelFriendRes::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMDelFriendRes::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDelFriendRes.user_id)
  return user_id_;
}
inline void IMDelFriendRes::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDelFriendRes.user_id)
}

// required uint32 result_code = 2;
inline bool IMDelFriendRes::has_result_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMDelFriendRes::set_has_result_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMDelFriendRes::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMDelFriendRes::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMDelFriendRes::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDelFriendRes.result_code)
  return result_code_;
}
inline void IMDelFriendRes::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDelFriendRes.result_code)
}

// optional uint32 friend_id = 10;
inline bool IMDelFriendRes::has_friend_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMDelFriendRes::set_has_friend_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMDelFriendRes::clear_has_friend_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMDelFriendRes::clear_friend_id() {
  friend_id_ = 0u;
  clear_has_friend_id();
}
inline ::google::protobuf::uint32 IMDelFriendRes::friend_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDelFriendRes.friend_id)
  return friend_id_;
}
inline void IMDelFriendRes::set_friend_id(::google::protobuf::uint32 value) {
  set_has_friend_id();
  friend_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDelFriendRes.friend_id)
}

// optional bytes attach_data = 20;
inline bool IMDelFriendRes::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMDelFriendRes::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMDelFriendRes::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMDelFriendRes::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMDelFriendRes::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDelFriendRes.attach_data)
  return *attach_data_;
}
inline void IMDelFriendRes::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDelFriendRes.attach_data)
}
inline void IMDelFriendRes::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMDelFriendRes.attach_data)
}
inline void IMDelFriendRes::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMDelFriendRes.attach_data)
}
inline ::std::string* IMDelFriendRes::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMDelFriendRes.attach_data)
  return attach_data_;
}
inline ::std::string* IMDelFriendRes::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMDelFriendRes::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMDelFriendRes.attach_data)
}

// -------------------------------------------------------------------

// IMChgFriendRemarkReq

// required uint32 user_id = 1;
inline bool IMChgFriendRemarkReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMChgFriendRemarkReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMChgFriendRemarkReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMChgFriendRemarkReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMChgFriendRemarkReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChgFriendRemarkReq.user_id)
  return user_id_;
}
inline void IMChgFriendRemarkReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChgFriendRemarkReq.user_id)
}

// required uint32 friend_id = 2;
inline bool IMChgFriendRemarkReq::has_friend_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMChgFriendRemarkReq::set_has_friend_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMChgFriendRemarkReq::clear_has_friend_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMChgFriendRemarkReq::clear_friend_id() {
  friend_id_ = 0u;
  clear_has_friend_id();
}
inline ::google::protobuf::uint32 IMChgFriendRemarkReq::friend_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChgFriendRemarkReq.friend_id)
  return friend_id_;
}
inline void IMChgFriendRemarkReq::set_friend_id(::google::protobuf::uint32 value) {
  set_has_friend_id();
  friend_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChgFriendRemarkReq.friend_id)
}

// required string friend_nick = 3;
inline bool IMChgFriendRemarkReq::has_friend_nick() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMChgFriendRemarkReq::set_has_friend_nick() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMChgFriendRemarkReq::clear_has_friend_nick() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMChgFriendRemarkReq::clear_friend_nick() {
  if (friend_nick_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_nick_->clear();
  }
  clear_has_friend_nick();
}
inline const ::std::string& IMChgFriendRemarkReq::friend_nick() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChgFriendRemarkReq.friend_nick)
  return *friend_nick_;
}
inline void IMChgFriendRemarkReq::set_friend_nick(const ::std::string& value) {
  set_has_friend_nick();
  if (friend_nick_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_nick_ = new ::std::string;
  }
  friend_nick_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChgFriendRemarkReq.friend_nick)
}
inline void IMChgFriendRemarkReq::set_friend_nick(const char* value) {
  set_has_friend_nick();
  if (friend_nick_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_nick_ = new ::std::string;
  }
  friend_nick_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMChgFriendRemarkReq.friend_nick)
}
inline void IMChgFriendRemarkReq::set_friend_nick(const char* value, size_t size) {
  set_has_friend_nick();
  if (friend_nick_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_nick_ = new ::std::string;
  }
  friend_nick_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMChgFriendRemarkReq.friend_nick)
}
inline ::std::string* IMChgFriendRemarkReq::mutable_friend_nick() {
  set_has_friend_nick();
  if (friend_nick_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_nick_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMChgFriendRemarkReq.friend_nick)
  return friend_nick_;
}
inline ::std::string* IMChgFriendRemarkReq::release_friend_nick() {
  clear_has_friend_nick();
  if (friend_nick_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = friend_nick_;
    friend_nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMChgFriendRemarkReq::set_allocated_friend_nick(::std::string* friend_nick) {
  if (friend_nick_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete friend_nick_;
  }
  if (friend_nick) {
    set_has_friend_nick();
    friend_nick_ = friend_nick;
  } else {
    clear_has_friend_nick();
    friend_nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMChgFriendRemarkReq.friend_nick)
}

// optional bytes attach_data = 20;
inline bool IMChgFriendRemarkReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMChgFriendRemarkReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMChgFriendRemarkReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMChgFriendRemarkReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMChgFriendRemarkReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChgFriendRemarkReq.attach_data)
  return *attach_data_;
}
inline void IMChgFriendRemarkReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChgFriendRemarkReq.attach_data)
}
inline void IMChgFriendRemarkReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMChgFriendRemarkReq.attach_data)
}
inline void IMChgFriendRemarkReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMChgFriendRemarkReq.attach_data)
}
inline ::std::string* IMChgFriendRemarkReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMChgFriendRemarkReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMChgFriendRemarkReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMChgFriendRemarkReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMChgFriendRemarkReq.attach_data)
}

// -------------------------------------------------------------------

// IMChgFriendRemarkRes

// required uint32 user_id = 1;
inline bool IMChgFriendRemarkRes::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMChgFriendRemarkRes::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMChgFriendRemarkRes::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMChgFriendRemarkRes::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMChgFriendRemarkRes::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChgFriendRemarkRes.user_id)
  return user_id_;
}
inline void IMChgFriendRemarkRes::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChgFriendRemarkRes.user_id)
}

// required uint32 result_code = 2;
inline bool IMChgFriendRemarkRes::has_result_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMChgFriendRemarkRes::set_has_result_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMChgFriendRemarkRes::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMChgFriendRemarkRes::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMChgFriendRemarkRes::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChgFriendRemarkRes.result_code)
  return result_code_;
}
inline void IMChgFriendRemarkRes::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChgFriendRemarkRes.result_code)
}

// optional uint32 friend_id = 10;
inline bool IMChgFriendRemarkRes::has_friend_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMChgFriendRemarkRes::set_has_friend_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMChgFriendRemarkRes::clear_has_friend_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMChgFriendRemarkRes::clear_friend_id() {
  friend_id_ = 0u;
  clear_has_friend_id();
}
inline ::google::protobuf::uint32 IMChgFriendRemarkRes::friend_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChgFriendRemarkRes.friend_id)
  return friend_id_;
}
inline void IMChgFriendRemarkRes::set_friend_id(::google::protobuf::uint32 value) {
  set_has_friend_id();
  friend_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChgFriendRemarkRes.friend_id)
}

// optional bytes attach_data = 20;
inline bool IMChgFriendRemarkRes::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMChgFriendRemarkRes::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMChgFriendRemarkRes::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMChgFriendRemarkRes::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMChgFriendRemarkRes::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChgFriendRemarkRes.attach_data)
  return *attach_data_;
}
inline void IMChgFriendRemarkRes::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChgFriendRemarkRes.attach_data)
}
inline void IMChgFriendRemarkRes::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMChgFriendRemarkRes.attach_data)
}
inline void IMChgFriendRemarkRes::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMChgFriendRemarkRes.attach_data)
}
inline ::std::string* IMChgFriendRemarkRes::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMChgFriendRemarkRes.attach_data)
  return attach_data_;
}
inline ::std::string* IMChgFriendRemarkRes::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMChgFriendRemarkRes::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMChgFriendRemarkRes.attach_data)
}

// -------------------------------------------------------------------

// IMCreateFriendGroupReq

// required uint32 user_id = 1;
inline bool IMCreateFriendGroupReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMCreateFriendGroupReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMCreateFriendGroupReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMCreateFriendGroupReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMCreateFriendGroupReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMCreateFriendGroupReq.user_id)
  return user_id_;
}
inline void IMCreateFriendGroupReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMCreateFriendGroupReq.user_id)
}

// required string group_name = 2;
inline bool IMCreateFriendGroupReq::has_group_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMCreateFriendGroupReq::set_has_group_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMCreateFriendGroupReq::clear_has_group_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMCreateFriendGroupReq::clear_group_name() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_->clear();
  }
  clear_has_group_name();
}
inline const ::std::string& IMCreateFriendGroupReq::group_name() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMCreateFriendGroupReq.group_name)
  return *group_name_;
}
inline void IMCreateFriendGroupReq::set_group_name(const ::std::string& value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMCreateFriendGroupReq.group_name)
}
inline void IMCreateFriendGroupReq::set_group_name(const char* value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMCreateFriendGroupReq.group_name)
}
inline void IMCreateFriendGroupReq::set_group_name(const char* value, size_t size) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMCreateFriendGroupReq.group_name)
}
inline ::std::string* IMCreateFriendGroupReq::mutable_group_name() {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMCreateFriendGroupReq.group_name)
  return group_name_;
}
inline ::std::string* IMCreateFriendGroupReq::release_group_name() {
  clear_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = group_name_;
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMCreateFriendGroupReq::set_allocated_group_name(::std::string* group_name) {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (group_name) {
    set_has_group_name();
    group_name_ = group_name;
  } else {
    clear_has_group_name();
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMCreateFriendGroupReq.group_name)
}

// optional bytes attach_data = 20;
inline bool IMCreateFriendGroupReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMCreateFriendGroupReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMCreateFriendGroupReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMCreateFriendGroupReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMCreateFriendGroupReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMCreateFriendGroupReq.attach_data)
  return *attach_data_;
}
inline void IMCreateFriendGroupReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMCreateFriendGroupReq.attach_data)
}
inline void IMCreateFriendGroupReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMCreateFriendGroupReq.attach_data)
}
inline void IMCreateFriendGroupReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMCreateFriendGroupReq.attach_data)
}
inline ::std::string* IMCreateFriendGroupReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMCreateFriendGroupReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMCreateFriendGroupReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMCreateFriendGroupReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMCreateFriendGroupReq.attach_data)
}

// -------------------------------------------------------------------

// IMCreateFriendGroupRes

// required uint32 user_id = 1;
inline bool IMCreateFriendGroupRes::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMCreateFriendGroupRes::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMCreateFriendGroupRes::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMCreateFriendGroupRes::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMCreateFriendGroupRes::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMCreateFriendGroupRes.user_id)
  return user_id_;
}
inline void IMCreateFriendGroupRes::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMCreateFriendGroupRes.user_id)
}

// required uint32 group_id = 2;
inline bool IMCreateFriendGroupRes::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMCreateFriendGroupRes::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMCreateFriendGroupRes::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMCreateFriendGroupRes::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMCreateFriendGroupRes::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMCreateFriendGroupRes.group_id)
  return group_id_;
}
inline void IMCreateFriendGroupRes::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMCreateFriendGroupRes.group_id)
}

// optional bytes attach_data = 20;
inline bool IMCreateFriendGroupRes::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMCreateFriendGroupRes::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMCreateFriendGroupRes::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMCreateFriendGroupRes::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMCreateFriendGroupRes::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMCreateFriendGroupRes.attach_data)
  return *attach_data_;
}
inline void IMCreateFriendGroupRes::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMCreateFriendGroupRes.attach_data)
}
inline void IMCreateFriendGroupRes::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMCreateFriendGroupRes.attach_data)
}
inline void IMCreateFriendGroupRes::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMCreateFriendGroupRes.attach_data)
}
inline ::std::string* IMCreateFriendGroupRes::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMCreateFriendGroupRes.attach_data)
  return attach_data_;
}
inline ::std::string* IMCreateFriendGroupRes::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMCreateFriendGroupRes::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMCreateFriendGroupRes.attach_data)
}

// -------------------------------------------------------------------

// IMDelFriendGroupReq

// required uint32 user_id = 1;
inline bool IMDelFriendGroupReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMDelFriendGroupReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMDelFriendGroupReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMDelFriendGroupReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMDelFriendGroupReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDelFriendGroupReq.user_id)
  return user_id_;
}
inline void IMDelFriendGroupReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDelFriendGroupReq.user_id)
}

// required uint32 group_id = 2;
inline bool IMDelFriendGroupReq::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMDelFriendGroupReq::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMDelFriendGroupReq::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMDelFriendGroupReq::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMDelFriendGroupReq::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDelFriendGroupReq.group_id)
  return group_id_;
}
inline void IMDelFriendGroupReq::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDelFriendGroupReq.group_id)
}

// optional bytes attach_data = 20;
inline bool IMDelFriendGroupReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMDelFriendGroupReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMDelFriendGroupReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMDelFriendGroupReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMDelFriendGroupReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDelFriendGroupReq.attach_data)
  return *attach_data_;
}
inline void IMDelFriendGroupReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDelFriendGroupReq.attach_data)
}
inline void IMDelFriendGroupReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMDelFriendGroupReq.attach_data)
}
inline void IMDelFriendGroupReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMDelFriendGroupReq.attach_data)
}
inline ::std::string* IMDelFriendGroupReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMDelFriendGroupReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMDelFriendGroupReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMDelFriendGroupReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMDelFriendGroupReq.attach_data)
}

// -------------------------------------------------------------------

// IMDelFriendGroupRes

// required uint32 user_id = 1;
inline bool IMDelFriendGroupRes::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMDelFriendGroupRes::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMDelFriendGroupRes::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMDelFriendGroupRes::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMDelFriendGroupRes::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDelFriendGroupRes.user_id)
  return user_id_;
}
inline void IMDelFriendGroupRes::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDelFriendGroupRes.user_id)
}

// required uint32 result_code = 2;
inline bool IMDelFriendGroupRes::has_result_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMDelFriendGroupRes::set_has_result_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMDelFriendGroupRes::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMDelFriendGroupRes::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMDelFriendGroupRes::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDelFriendGroupRes.result_code)
  return result_code_;
}
inline void IMDelFriendGroupRes::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDelFriendGroupRes.result_code)
}

// optional bytes attach_data = 20;
inline bool IMDelFriendGroupRes::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMDelFriendGroupRes::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMDelFriendGroupRes::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMDelFriendGroupRes::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMDelFriendGroupRes::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDelFriendGroupRes.attach_data)
  return *attach_data_;
}
inline void IMDelFriendGroupRes::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDelFriendGroupRes.attach_data)
}
inline void IMDelFriendGroupRes::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMDelFriendGroupRes.attach_data)
}
inline void IMDelFriendGroupRes::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMDelFriendGroupRes.attach_data)
}
inline ::std::string* IMDelFriendGroupRes::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMDelFriendGroupRes.attach_data)
  return attach_data_;
}
inline ::std::string* IMDelFriendGroupRes::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMDelFriendGroupRes::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMDelFriendGroupRes.attach_data)
}

// -------------------------------------------------------------------

// IMMoveFriendToGroupReq

// required uint32 user_id = 1;
inline bool IMMoveFriendToGroupReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMMoveFriendToGroupReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMMoveFriendToGroupReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMMoveFriendToGroupReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMMoveFriendToGroupReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMMoveFriendToGroupReq.user_id)
  return user_id_;
}
inline void IMMoveFriendToGroupReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMMoveFriendToGroupReq.user_id)
}

// required uint32 group_id = 2;
inline bool IMMoveFriendToGroupReq::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMMoveFriendToGroupReq::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMMoveFriendToGroupReq::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMMoveFriendToGroupReq::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMMoveFriendToGroupReq::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMMoveFriendToGroupReq.group_id)
  return group_id_;
}
inline void IMMoveFriendToGroupReq::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMMoveFriendToGroupReq.group_id)
}

// repeated uint32 friend_id_list = 3;
inline int IMMoveFriendToGroupReq::friend_id_list_size() const {
  return friend_id_list_.size();
}
inline void IMMoveFriendToGroupReq::clear_friend_id_list() {
  friend_id_list_.Clear();
}
inline ::google::protobuf::uint32 IMMoveFriendToGroupReq::friend_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMMoveFriendToGroupReq.friend_id_list)
  return friend_id_list_.Get(index);
}
inline void IMMoveFriendToGroupReq::set_friend_id_list(int index, ::google::protobuf::uint32 value) {
  friend_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMMoveFriendToGroupReq.friend_id_list)
}
inline void IMMoveFriendToGroupReq::add_friend_id_list(::google::protobuf::uint32 value) {
  friend_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Buddy.IMMoveFriendToGroupReq.friend_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMMoveFriendToGroupReq::friend_id_list() const {
  // @@protoc_insertion_point(field_list:IM.Buddy.IMMoveFriendToGroupReq.friend_id_list)
  return friend_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMMoveFriendToGroupReq::mutable_friend_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Buddy.IMMoveFriendToGroupReq.friend_id_list)
  return &friend_id_list_;
}

// optional bytes attach_data = 20;
inline bool IMMoveFriendToGroupReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMMoveFriendToGroupReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMMoveFriendToGroupReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMMoveFriendToGroupReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMMoveFriendToGroupReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMMoveFriendToGroupReq.attach_data)
  return *attach_data_;
}
inline void IMMoveFriendToGroupReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMMoveFriendToGroupReq.attach_data)
}
inline void IMMoveFriendToGroupReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMMoveFriendToGroupReq.attach_data)
}
inline void IMMoveFriendToGroupReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMMoveFriendToGroupReq.attach_data)
}
inline ::std::string* IMMoveFriendToGroupReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMMoveFriendToGroupReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMMoveFriendToGroupReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMMoveFriendToGroupReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMMoveFriendToGroupReq.attach_data)
}

// -------------------------------------------------------------------

// IMMoveFriendToGroupRes

// required uint32 user_id = 1;
inline bool IMMoveFriendToGroupRes::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMMoveFriendToGroupRes::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMMoveFriendToGroupRes::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMMoveFriendToGroupRes::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMMoveFriendToGroupRes::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMMoveFriendToGroupRes.user_id)
  return user_id_;
}
inline void IMMoveFriendToGroupRes::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMMoveFriendToGroupRes.user_id)
}

// required uint32 result_code = 2;
inline bool IMMoveFriendToGroupRes::has_result_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMMoveFriendToGroupRes::set_has_result_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMMoveFriendToGroupRes::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMMoveFriendToGroupRes::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMMoveFriendToGroupRes::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMMoveFriendToGroupRes.result_code)
  return result_code_;
}
inline void IMMoveFriendToGroupRes::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMMoveFriendToGroupRes.result_code)
}

// optional bytes attach_data = 20;
inline bool IMMoveFriendToGroupRes::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMMoveFriendToGroupRes::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMMoveFriendToGroupRes::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMMoveFriendToGroupRes::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMMoveFriendToGroupRes::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMMoveFriendToGroupRes.attach_data)
  return *attach_data_;
}
inline void IMMoveFriendToGroupRes::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMMoveFriendToGroupRes.attach_data)
}
inline void IMMoveFriendToGroupRes::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMMoveFriendToGroupRes.attach_data)
}
inline void IMMoveFriendToGroupRes::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMMoveFriendToGroupRes.attach_data)
}
inline ::std::string* IMMoveFriendToGroupRes::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMMoveFriendToGroupRes.attach_data)
  return attach_data_;
}
inline ::std::string* IMMoveFriendToGroupRes::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMMoveFriendToGroupRes::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMMoveFriendToGroupRes.attach_data)
}

// -------------------------------------------------------------------

// IMChgFriendGroupNameReq

// required uint32 user_id = 1;
inline bool IMChgFriendGroupNameReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMChgFriendGroupNameReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMChgFriendGroupNameReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMChgFriendGroupNameReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMChgFriendGroupNameReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChgFriendGroupNameReq.user_id)
  return user_id_;
}
inline void IMChgFriendGroupNameReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChgFriendGroupNameReq.user_id)
}

// required uint32 group_id = 2;
inline bool IMChgFriendGroupNameReq::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMChgFriendGroupNameReq::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMChgFriendGroupNameReq::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMChgFriendGroupNameReq::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMChgFriendGroupNameReq::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChgFriendGroupNameReq.group_id)
  return group_id_;
}
inline void IMChgFriendGroupNameReq::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChgFriendGroupNameReq.group_id)
}

// required string group_name = 3;
inline bool IMChgFriendGroupNameReq::has_group_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMChgFriendGroupNameReq::set_has_group_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMChgFriendGroupNameReq::clear_has_group_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMChgFriendGroupNameReq::clear_group_name() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_->clear();
  }
  clear_has_group_name();
}
inline const ::std::string& IMChgFriendGroupNameReq::group_name() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChgFriendGroupNameReq.group_name)
  return *group_name_;
}
inline void IMChgFriendGroupNameReq::set_group_name(const ::std::string& value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChgFriendGroupNameReq.group_name)
}
inline void IMChgFriendGroupNameReq::set_group_name(const char* value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMChgFriendGroupNameReq.group_name)
}
inline void IMChgFriendGroupNameReq::set_group_name(const char* value, size_t size) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMChgFriendGroupNameReq.group_name)
}
inline ::std::string* IMChgFriendGroupNameReq::mutable_group_name() {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMChgFriendGroupNameReq.group_name)
  return group_name_;
}
inline ::std::string* IMChgFriendGroupNameReq::release_group_name() {
  clear_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = group_name_;
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMChgFriendGroupNameReq::set_allocated_group_name(::std::string* group_name) {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (group_name) {
    set_has_group_name();
    group_name_ = group_name;
  } else {
    clear_has_group_name();
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMChgFriendGroupNameReq.group_name)
}

// optional bytes attach_data = 20;
inline bool IMChgFriendGroupNameReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMChgFriendGroupNameReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMChgFriendGroupNameReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMChgFriendGroupNameReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMChgFriendGroupNameReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChgFriendGroupNameReq.attach_data)
  return *attach_data_;
}
inline void IMChgFriendGroupNameReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChgFriendGroupNameReq.attach_data)
}
inline void IMChgFriendGroupNameReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMChgFriendGroupNameReq.attach_data)
}
inline void IMChgFriendGroupNameReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMChgFriendGroupNameReq.attach_data)
}
inline ::std::string* IMChgFriendGroupNameReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMChgFriendGroupNameReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMChgFriendGroupNameReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMChgFriendGroupNameReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMChgFriendGroupNameReq.attach_data)
}

// -------------------------------------------------------------------

// IMChgFriendGroupNameRes

// required uint32 user_id = 1;
inline bool IMChgFriendGroupNameRes::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMChgFriendGroupNameRes::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMChgFriendGroupNameRes::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMChgFriendGroupNameRes::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMChgFriendGroupNameRes::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChgFriendGroupNameRes.user_id)
  return user_id_;
}
inline void IMChgFriendGroupNameRes::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChgFriendGroupNameRes.user_id)
}

// required uint32 result_code = 2;
inline bool IMChgFriendGroupNameRes::has_result_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMChgFriendGroupNameRes::set_has_result_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMChgFriendGroupNameRes::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMChgFriendGroupNameRes::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMChgFriendGroupNameRes::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChgFriendGroupNameRes.result_code)
  return result_code_;
}
inline void IMChgFriendGroupNameRes::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChgFriendGroupNameRes.result_code)
}

// optional bytes attach_data = 20;
inline bool IMChgFriendGroupNameRes::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMChgFriendGroupNameRes::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMChgFriendGroupNameRes::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMChgFriendGroupNameRes::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMChgFriendGroupNameRes::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChgFriendGroupNameRes.attach_data)
  return *attach_data_;
}
inline void IMChgFriendGroupNameRes::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChgFriendGroupNameRes.attach_data)
}
inline void IMChgFriendGroupNameRes::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMChgFriendGroupNameRes.attach_data)
}
inline void IMChgFriendGroupNameRes::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMChgFriendGroupNameRes.attach_data)
}
inline ::std::string* IMChgFriendGroupNameRes::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMChgFriendGroupNameRes.attach_data)
  return attach_data_;
}
inline ::std::string* IMChgFriendGroupNameRes::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMChgFriendGroupNameRes::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMChgFriendGroupNameRes.attach_data)
}

// -------------------------------------------------------------------

// IMFriendNotifyReq

// required uint32 from_user_id = 1;
inline bool IMFriendNotifyReq::has_from_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMFriendNotifyReq::set_has_from_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMFriendNotifyReq::clear_has_from_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMFriendNotifyReq::clear_from_user_id() {
  from_user_id_ = 0u;
  clear_has_from_user_id();
}
inline ::google::protobuf::uint32 IMFriendNotifyReq::from_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMFriendNotifyReq.from_user_id)
  return from_user_id_;
}
inline void IMFriendNotifyReq::set_from_user_id(::google::protobuf::uint32 value) {
  set_has_from_user_id();
  from_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMFriendNotifyReq.from_user_id)
}

// required uint32 to_user_id = 2;
inline bool IMFriendNotifyReq::has_to_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMFriendNotifyReq::set_has_to_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMFriendNotifyReq::clear_has_to_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMFriendNotifyReq::clear_to_user_id() {
  to_user_id_ = 0u;
  clear_has_to_user_id();
}
inline ::google::protobuf::uint32 IMFriendNotifyReq::to_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMFriendNotifyReq.to_user_id)
  return to_user_id_;
}
inline void IMFriendNotifyReq::set_to_user_id(::google::protobuf::uint32 value) {
  set_has_to_user_id();
  to_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMFriendNotifyReq.to_user_id)
}

// required .IM.BaseDefine.FriendResStatusType friendres_status_type = 3;
inline bool IMFriendNotifyReq::has_friendres_status_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMFriendNotifyReq::set_has_friendres_status_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMFriendNotifyReq::clear_has_friendres_status_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMFriendNotifyReq::clear_friendres_status_type() {
  friendres_status_type_ = 0;
  clear_has_friendres_status_type();
}
inline ::IM::BaseDefine::FriendResStatusType IMFriendNotifyReq::friendres_status_type() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMFriendNotifyReq.friendres_status_type)
  return static_cast< ::IM::BaseDefine::FriendResStatusType >(friendres_status_type_);
}
inline void IMFriendNotifyReq::set_friendres_status_type(::IM::BaseDefine::FriendResStatusType value) {
  assert(::IM::BaseDefine::FriendResStatusType_IsValid(value));
  set_has_friendres_status_type();
  friendres_status_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMFriendNotifyReq.friendres_status_type)
}

// optional string user_nickname = 6;
inline bool IMFriendNotifyReq::has_user_nickname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMFriendNotifyReq::set_has_user_nickname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMFriendNotifyReq::clear_has_user_nickname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMFriendNotifyReq::clear_user_nickname() {
  if (user_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_->clear();
  }
  clear_has_user_nickname();
}
inline const ::std::string& IMFriendNotifyReq::user_nickname() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMFriendNotifyReq.user_nickname)
  return *user_nickname_;
}
inline void IMFriendNotifyReq::set_user_nickname(const ::std::string& value) {
  set_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_ = new ::std::string;
  }
  user_nickname_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMFriendNotifyReq.user_nickname)
}
inline void IMFriendNotifyReq::set_user_nickname(const char* value) {
  set_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_ = new ::std::string;
  }
  user_nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMFriendNotifyReq.user_nickname)
}
inline void IMFriendNotifyReq::set_user_nickname(const char* value, size_t size) {
  set_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_ = new ::std::string;
  }
  user_nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMFriendNotifyReq.user_nickname)
}
inline ::std::string* IMFriendNotifyReq::mutable_user_nickname() {
  set_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMFriendNotifyReq.user_nickname)
  return user_nickname_;
}
inline ::std::string* IMFriendNotifyReq::release_user_nickname() {
  clear_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_nickname_;
    user_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMFriendNotifyReq::set_allocated_user_nickname(::std::string* user_nickname) {
  if (user_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_nickname_;
  }
  if (user_nickname) {
    set_has_user_nickname();
    user_nickname_ = user_nickname;
  } else {
    clear_has_user_nickname();
    user_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMFriendNotifyReq.user_nickname)
}

// optional string user_headlink = 7;
inline bool IMFriendNotifyReq::has_user_headlink() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMFriendNotifyReq::set_has_user_headlink() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMFriendNotifyReq::clear_has_user_headlink() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMFriendNotifyReq::clear_user_headlink() {
  if (user_headlink_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_headlink_->clear();
  }
  clear_has_user_headlink();
}
inline const ::std::string& IMFriendNotifyReq::user_headlink() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMFriendNotifyReq.user_headlink)
  return *user_headlink_;
}
inline void IMFriendNotifyReq::set_user_headlink(const ::std::string& value) {
  set_has_user_headlink();
  if (user_headlink_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_headlink_ = new ::std::string;
  }
  user_headlink_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMFriendNotifyReq.user_headlink)
}
inline void IMFriendNotifyReq::set_user_headlink(const char* value) {
  set_has_user_headlink();
  if (user_headlink_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_headlink_ = new ::std::string;
  }
  user_headlink_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMFriendNotifyReq.user_headlink)
}
inline void IMFriendNotifyReq::set_user_headlink(const char* value, size_t size) {
  set_has_user_headlink();
  if (user_headlink_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_headlink_ = new ::std::string;
  }
  user_headlink_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMFriendNotifyReq.user_headlink)
}
inline ::std::string* IMFriendNotifyReq::mutable_user_headlink() {
  set_has_user_headlink();
  if (user_headlink_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_headlink_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMFriendNotifyReq.user_headlink)
  return user_headlink_;
}
inline ::std::string* IMFriendNotifyReq::release_user_headlink() {
  clear_has_user_headlink();
  if (user_headlink_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_headlink_;
    user_headlink_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMFriendNotifyReq::set_allocated_user_headlink(::std::string* user_headlink) {
  if (user_headlink_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_headlink_;
  }
  if (user_headlink) {
    set_has_user_headlink();
    user_headlink_ = user_headlink;
  } else {
    clear_has_user_headlink();
    user_headlink_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMFriendNotifyReq.user_headlink)
}

// optional uint32 user_gender = 8;
inline bool IMFriendNotifyReq::has_user_gender() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMFriendNotifyReq::set_has_user_gender() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMFriendNotifyReq::clear_has_user_gender() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMFriendNotifyReq::clear_user_gender() {
  user_gender_ = 0u;
  clear_has_user_gender();
}
inline ::google::protobuf::uint32 IMFriendNotifyReq::user_gender() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMFriendNotifyReq.user_gender)
  return user_gender_;
}
inline void IMFriendNotifyReq::set_user_gender(::google::protobuf::uint32 value) {
  set_has_user_gender();
  user_gender_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMFriendNotifyReq.user_gender)
}

// optional uint32 user_uid = 9;
inline bool IMFriendNotifyReq::has_user_uid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMFriendNotifyReq::set_has_user_uid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMFriendNotifyReq::clear_has_user_uid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMFriendNotifyReq::clear_user_uid() {
  user_uid_ = 0u;
  clear_has_user_uid();
}
inline ::google::protobuf::uint32 IMFriendNotifyReq::user_uid() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMFriendNotifyReq.user_uid)
  return user_uid_;
}
inline void IMFriendNotifyReq::set_user_uid(::google::protobuf::uint32 value) {
  set_has_user_uid();
  user_uid_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMFriendNotifyReq.user_uid)
}

// optional string refuse_reason = 10;
inline bool IMFriendNotifyReq::has_refuse_reason() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMFriendNotifyReq::set_has_refuse_reason() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMFriendNotifyReq::clear_has_refuse_reason() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMFriendNotifyReq::clear_refuse_reason() {
  if (refuse_reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    refuse_reason_->clear();
  }
  clear_has_refuse_reason();
}
inline const ::std::string& IMFriendNotifyReq::refuse_reason() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMFriendNotifyReq.refuse_reason)
  return *refuse_reason_;
}
inline void IMFriendNotifyReq::set_refuse_reason(const ::std::string& value) {
  set_has_refuse_reason();
  if (refuse_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    refuse_reason_ = new ::std::string;
  }
  refuse_reason_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMFriendNotifyReq.refuse_reason)
}
inline void IMFriendNotifyReq::set_refuse_reason(const char* value) {
  set_has_refuse_reason();
  if (refuse_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    refuse_reason_ = new ::std::string;
  }
  refuse_reason_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMFriendNotifyReq.refuse_reason)
}
inline void IMFriendNotifyReq::set_refuse_reason(const char* value, size_t size) {
  set_has_refuse_reason();
  if (refuse_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    refuse_reason_ = new ::std::string;
  }
  refuse_reason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMFriendNotifyReq.refuse_reason)
}
inline ::std::string* IMFriendNotifyReq::mutable_refuse_reason() {
  set_has_refuse_reason();
  if (refuse_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    refuse_reason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMFriendNotifyReq.refuse_reason)
  return refuse_reason_;
}
inline ::std::string* IMFriendNotifyReq::release_refuse_reason() {
  clear_has_refuse_reason();
  if (refuse_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = refuse_reason_;
    refuse_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMFriendNotifyReq::set_allocated_refuse_reason(::std::string* refuse_reason) {
  if (refuse_reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete refuse_reason_;
  }
  if (refuse_reason) {
    set_has_refuse_reason();
    refuse_reason_ = refuse_reason;
  } else {
    clear_has_refuse_reason();
    refuse_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMFriendNotifyReq.refuse_reason)
}

// -------------------------------------------------------------------

// IMFriendNotifyRes

// required uint32 from_user_id = 1;
inline bool IMFriendNotifyRes::has_from_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMFriendNotifyRes::set_has_from_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMFriendNotifyRes::clear_has_from_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMFriendNotifyRes::clear_from_user_id() {
  from_user_id_ = 0u;
  clear_has_from_user_id();
}
inline ::google::protobuf::uint32 IMFriendNotifyRes::from_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMFriendNotifyRes.from_user_id)
  return from_user_id_;
}
inline void IMFriendNotifyRes::set_from_user_id(::google::protobuf::uint32 value) {
  set_has_from_user_id();
  from_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMFriendNotifyRes.from_user_id)
}

// required uint32 to_user_id = 2;
inline bool IMFriendNotifyRes::has_to_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMFriendNotifyRes::set_has_to_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMFriendNotifyRes::clear_has_to_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMFriendNotifyRes::clear_to_user_id() {
  to_user_id_ = 0u;
  clear_has_to_user_id();
}
inline ::google::protobuf::uint32 IMFriendNotifyRes::to_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMFriendNotifyRes.to_user_id)
  return to_user_id_;
}
inline void IMFriendNotifyRes::set_to_user_id(::google::protobuf::uint32 value) {
  set_has_to_user_id();
  to_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMFriendNotifyRes.to_user_id)
}

// -------------------------------------------------------------------

// IMGetAddFriendReq

// required uint32 user_id = 1;
inline bool IMGetAddFriendReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGetAddFriendReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGetAddFriendReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGetAddFriendReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMGetAddFriendReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMGetAddFriendReq.user_id)
  return user_id_;
}
inline void IMGetAddFriendReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMGetAddFriendReq.user_id)
}

// optional bytes attach_data = 20;
inline bool IMGetAddFriendReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGetAddFriendReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGetAddFriendReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGetAddFriendReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGetAddFriendReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMGetAddFriendReq.attach_data)
  return *attach_data_;
}
inline void IMGetAddFriendReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMGetAddFriendReq.attach_data)
}
inline void IMGetAddFriendReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMGetAddFriendReq.attach_data)
}
inline void IMGetAddFriendReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMGetAddFriendReq.attach_data)
}
inline ::std::string* IMGetAddFriendReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMGetAddFriendReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMGetAddFriendReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGetAddFriendReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMGetAddFriendReq.attach_data)
}

// -------------------------------------------------------------------

// AddFrienInfo

// required uint32 from_user_id = 1;
inline bool AddFrienInfo::has_from_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddFrienInfo::set_has_from_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddFrienInfo::clear_has_from_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddFrienInfo::clear_from_user_id() {
  from_user_id_ = 0u;
  clear_has_from_user_id();
}
inline ::google::protobuf::uint32 AddFrienInfo::from_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.AddFrienInfo.from_user_id)
  return from_user_id_;
}
inline void AddFrienInfo::set_from_user_id(::google::protobuf::uint32 value) {
  set_has_from_user_id();
  from_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.AddFrienInfo.from_user_id)
}

// required uint32 create_time = 2;
inline bool AddFrienInfo::has_create_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddFrienInfo::set_has_create_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddFrienInfo::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddFrienInfo::clear_create_time() {
  create_time_ = 0u;
  clear_has_create_time();
}
inline ::google::protobuf::uint32 AddFrienInfo::create_time() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.AddFrienInfo.create_time)
  return create_time_;
}
inline void AddFrienInfo::set_create_time(::google::protobuf::uint32 value) {
  set_has_create_time();
  create_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.AddFrienInfo.create_time)
}

// optional string extra_info = 3;
inline bool AddFrienInfo::has_extra_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddFrienInfo::set_has_extra_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddFrienInfo::clear_has_extra_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddFrienInfo::clear_extra_info() {
  if (extra_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extra_info_->clear();
  }
  clear_has_extra_info();
}
inline const ::std::string& AddFrienInfo::extra_info() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.AddFrienInfo.extra_info)
  return *extra_info_;
}
inline void AddFrienInfo::set_extra_info(const ::std::string& value) {
  set_has_extra_info();
  if (extra_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extra_info_ = new ::std::string;
  }
  extra_info_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.AddFrienInfo.extra_info)
}
inline void AddFrienInfo::set_extra_info(const char* value) {
  set_has_extra_info();
  if (extra_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extra_info_ = new ::std::string;
  }
  extra_info_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.AddFrienInfo.extra_info)
}
inline void AddFrienInfo::set_extra_info(const char* value, size_t size) {
  set_has_extra_info();
  if (extra_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extra_info_ = new ::std::string;
  }
  extra_info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.AddFrienInfo.extra_info)
}
inline ::std::string* AddFrienInfo::mutable_extra_info() {
  set_has_extra_info();
  if (extra_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extra_info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.AddFrienInfo.extra_info)
  return extra_info_;
}
inline ::std::string* AddFrienInfo::release_extra_info() {
  clear_has_extra_info();
  if (extra_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = extra_info_;
    extra_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AddFrienInfo::set_allocated_extra_info(::std::string* extra_info) {
  if (extra_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extra_info_;
  }
  if (extra_info) {
    set_has_extra_info();
    extra_info_ = extra_info;
  } else {
    clear_has_extra_info();
    extra_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.AddFrienInfo.extra_info)
}

// optional string user_nickname = 6;
inline bool AddFrienInfo::has_user_nickname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AddFrienInfo::set_has_user_nickname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AddFrienInfo::clear_has_user_nickname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AddFrienInfo::clear_user_nickname() {
  if (user_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_->clear();
  }
  clear_has_user_nickname();
}
inline const ::std::string& AddFrienInfo::user_nickname() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.AddFrienInfo.user_nickname)
  return *user_nickname_;
}
inline void AddFrienInfo::set_user_nickname(const ::std::string& value) {
  set_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_ = new ::std::string;
  }
  user_nickname_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.AddFrienInfo.user_nickname)
}
inline void AddFrienInfo::set_user_nickname(const char* value) {
  set_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_ = new ::std::string;
  }
  user_nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.AddFrienInfo.user_nickname)
}
inline void AddFrienInfo::set_user_nickname(const char* value, size_t size) {
  set_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_ = new ::std::string;
  }
  user_nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.AddFrienInfo.user_nickname)
}
inline ::std::string* AddFrienInfo::mutable_user_nickname() {
  set_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.AddFrienInfo.user_nickname)
  return user_nickname_;
}
inline ::std::string* AddFrienInfo::release_user_nickname() {
  clear_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_nickname_;
    user_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AddFrienInfo::set_allocated_user_nickname(::std::string* user_nickname) {
  if (user_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_nickname_;
  }
  if (user_nickname) {
    set_has_user_nickname();
    user_nickname_ = user_nickname;
  } else {
    clear_has_user_nickname();
    user_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.AddFrienInfo.user_nickname)
}

// optional string user_headlink = 7;
inline bool AddFrienInfo::has_user_headlink() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AddFrienInfo::set_has_user_headlink() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AddFrienInfo::clear_has_user_headlink() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AddFrienInfo::clear_user_headlink() {
  if (user_headlink_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_headlink_->clear();
  }
  clear_has_user_headlink();
}
inline const ::std::string& AddFrienInfo::user_headlink() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.AddFrienInfo.user_headlink)
  return *user_headlink_;
}
inline void AddFrienInfo::set_user_headlink(const ::std::string& value) {
  set_has_user_headlink();
  if (user_headlink_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_headlink_ = new ::std::string;
  }
  user_headlink_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.AddFrienInfo.user_headlink)
}
inline void AddFrienInfo::set_user_headlink(const char* value) {
  set_has_user_headlink();
  if (user_headlink_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_headlink_ = new ::std::string;
  }
  user_headlink_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.AddFrienInfo.user_headlink)
}
inline void AddFrienInfo::set_user_headlink(const char* value, size_t size) {
  set_has_user_headlink();
  if (user_headlink_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_headlink_ = new ::std::string;
  }
  user_headlink_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.AddFrienInfo.user_headlink)
}
inline ::std::string* AddFrienInfo::mutable_user_headlink() {
  set_has_user_headlink();
  if (user_headlink_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_headlink_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.AddFrienInfo.user_headlink)
  return user_headlink_;
}
inline ::std::string* AddFrienInfo::release_user_headlink() {
  clear_has_user_headlink();
  if (user_headlink_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_headlink_;
    user_headlink_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AddFrienInfo::set_allocated_user_headlink(::std::string* user_headlink) {
  if (user_headlink_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_headlink_;
  }
  if (user_headlink) {
    set_has_user_headlink();
    user_headlink_ = user_headlink;
  } else {
    clear_has_user_headlink();
    user_headlink_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.AddFrienInfo.user_headlink)
}

// optional uint32 user_gender = 8;
inline bool AddFrienInfo::has_user_gender() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AddFrienInfo::set_has_user_gender() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AddFrienInfo::clear_has_user_gender() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AddFrienInfo::clear_user_gender() {
  user_gender_ = 0u;
  clear_has_user_gender();
}
inline ::google::protobuf::uint32 AddFrienInfo::user_gender() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.AddFrienInfo.user_gender)
  return user_gender_;
}
inline void AddFrienInfo::set_user_gender(::google::protobuf::uint32 value) {
  set_has_user_gender();
  user_gender_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.AddFrienInfo.user_gender)
}

// optional uint32 user_uid = 9;
inline bool AddFrienInfo::has_user_uid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AddFrienInfo::set_has_user_uid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AddFrienInfo::clear_has_user_uid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AddFrienInfo::clear_user_uid() {
  user_uid_ = 0u;
  clear_has_user_uid();
}
inline ::google::protobuf::uint32 AddFrienInfo::user_uid() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.AddFrienInfo.user_uid)
  return user_uid_;
}
inline void AddFrienInfo::set_user_uid(::google::protobuf::uint32 value) {
  set_has_user_uid();
  user_uid_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.AddFrienInfo.user_uid)
}

// -------------------------------------------------------------------

// RefuseAddFrienInfo

// required uint32 refuse_user_id = 1;
inline bool RefuseAddFrienInfo::has_refuse_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RefuseAddFrienInfo::set_has_refuse_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RefuseAddFrienInfo::clear_has_refuse_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RefuseAddFrienInfo::clear_refuse_user_id() {
  refuse_user_id_ = 0u;
  clear_has_refuse_user_id();
}
inline ::google::protobuf::uint32 RefuseAddFrienInfo::refuse_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.RefuseAddFrienInfo.refuse_user_id)
  return refuse_user_id_;
}
inline void RefuseAddFrienInfo::set_refuse_user_id(::google::protobuf::uint32 value) {
  set_has_refuse_user_id();
  refuse_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.RefuseAddFrienInfo.refuse_user_id)
}

// required uint32 resp_time = 2;
inline bool RefuseAddFrienInfo::has_resp_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RefuseAddFrienInfo::set_has_resp_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RefuseAddFrienInfo::clear_has_resp_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RefuseAddFrienInfo::clear_resp_time() {
  resp_time_ = 0u;
  clear_has_resp_time();
}
inline ::google::protobuf::uint32 RefuseAddFrienInfo::resp_time() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.RefuseAddFrienInfo.resp_time)
  return resp_time_;
}
inline void RefuseAddFrienInfo::set_resp_time(::google::protobuf::uint32 value) {
  set_has_resp_time();
  resp_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.RefuseAddFrienInfo.resp_time)
}

// optional string refuse_reason = 3;
inline bool RefuseAddFrienInfo::has_refuse_reason() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RefuseAddFrienInfo::set_has_refuse_reason() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RefuseAddFrienInfo::clear_has_refuse_reason() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RefuseAddFrienInfo::clear_refuse_reason() {
  if (refuse_reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    refuse_reason_->clear();
  }
  clear_has_refuse_reason();
}
inline const ::std::string& RefuseAddFrienInfo::refuse_reason() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.RefuseAddFrienInfo.refuse_reason)
  return *refuse_reason_;
}
inline void RefuseAddFrienInfo::set_refuse_reason(const ::std::string& value) {
  set_has_refuse_reason();
  if (refuse_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    refuse_reason_ = new ::std::string;
  }
  refuse_reason_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.RefuseAddFrienInfo.refuse_reason)
}
inline void RefuseAddFrienInfo::set_refuse_reason(const char* value) {
  set_has_refuse_reason();
  if (refuse_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    refuse_reason_ = new ::std::string;
  }
  refuse_reason_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.RefuseAddFrienInfo.refuse_reason)
}
inline void RefuseAddFrienInfo::set_refuse_reason(const char* value, size_t size) {
  set_has_refuse_reason();
  if (refuse_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    refuse_reason_ = new ::std::string;
  }
  refuse_reason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.RefuseAddFrienInfo.refuse_reason)
}
inline ::std::string* RefuseAddFrienInfo::mutable_refuse_reason() {
  set_has_refuse_reason();
  if (refuse_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    refuse_reason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.RefuseAddFrienInfo.refuse_reason)
  return refuse_reason_;
}
inline ::std::string* RefuseAddFrienInfo::release_refuse_reason() {
  clear_has_refuse_reason();
  if (refuse_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = refuse_reason_;
    refuse_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RefuseAddFrienInfo::set_allocated_refuse_reason(::std::string* refuse_reason) {
  if (refuse_reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete refuse_reason_;
  }
  if (refuse_reason) {
    set_has_refuse_reason();
    refuse_reason_ = refuse_reason;
  } else {
    clear_has_refuse_reason();
    refuse_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.RefuseAddFrienInfo.refuse_reason)
}

// optional string user_nickname = 6;
inline bool RefuseAddFrienInfo::has_user_nickname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RefuseAddFrienInfo::set_has_user_nickname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RefuseAddFrienInfo::clear_has_user_nickname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RefuseAddFrienInfo::clear_user_nickname() {
  if (user_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_->clear();
  }
  clear_has_user_nickname();
}
inline const ::std::string& RefuseAddFrienInfo::user_nickname() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.RefuseAddFrienInfo.user_nickname)
  return *user_nickname_;
}
inline void RefuseAddFrienInfo::set_user_nickname(const ::std::string& value) {
  set_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_ = new ::std::string;
  }
  user_nickname_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.RefuseAddFrienInfo.user_nickname)
}
inline void RefuseAddFrienInfo::set_user_nickname(const char* value) {
  set_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_ = new ::std::string;
  }
  user_nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.RefuseAddFrienInfo.user_nickname)
}
inline void RefuseAddFrienInfo::set_user_nickname(const char* value, size_t size) {
  set_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_ = new ::std::string;
  }
  user_nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.RefuseAddFrienInfo.user_nickname)
}
inline ::std::string* RefuseAddFrienInfo::mutable_user_nickname() {
  set_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.RefuseAddFrienInfo.user_nickname)
  return user_nickname_;
}
inline ::std::string* RefuseAddFrienInfo::release_user_nickname() {
  clear_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_nickname_;
    user_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RefuseAddFrienInfo::set_allocated_user_nickname(::std::string* user_nickname) {
  if (user_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_nickname_;
  }
  if (user_nickname) {
    set_has_user_nickname();
    user_nickname_ = user_nickname;
  } else {
    clear_has_user_nickname();
    user_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.RefuseAddFrienInfo.user_nickname)
}

// optional string user_headlink = 7;
inline bool RefuseAddFrienInfo::has_user_headlink() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RefuseAddFrienInfo::set_has_user_headlink() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RefuseAddFrienInfo::clear_has_user_headlink() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RefuseAddFrienInfo::clear_user_headlink() {
  if (user_headlink_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_headlink_->clear();
  }
  clear_has_user_headlink();
}
inline const ::std::string& RefuseAddFrienInfo::user_headlink() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.RefuseAddFrienInfo.user_headlink)
  return *user_headlink_;
}
inline void RefuseAddFrienInfo::set_user_headlink(const ::std::string& value) {
  set_has_user_headlink();
  if (user_headlink_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_headlink_ = new ::std::string;
  }
  user_headlink_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.RefuseAddFrienInfo.user_headlink)
}
inline void RefuseAddFrienInfo::set_user_headlink(const char* value) {
  set_has_user_headlink();
  if (user_headlink_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_headlink_ = new ::std::string;
  }
  user_headlink_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.RefuseAddFrienInfo.user_headlink)
}
inline void RefuseAddFrienInfo::set_user_headlink(const char* value, size_t size) {
  set_has_user_headlink();
  if (user_headlink_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_headlink_ = new ::std::string;
  }
  user_headlink_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.RefuseAddFrienInfo.user_headlink)
}
inline ::std::string* RefuseAddFrienInfo::mutable_user_headlink() {
  set_has_user_headlink();
  if (user_headlink_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_headlink_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.RefuseAddFrienInfo.user_headlink)
  return user_headlink_;
}
inline ::std::string* RefuseAddFrienInfo::release_user_headlink() {
  clear_has_user_headlink();
  if (user_headlink_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_headlink_;
    user_headlink_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RefuseAddFrienInfo::set_allocated_user_headlink(::std::string* user_headlink) {
  if (user_headlink_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_headlink_;
  }
  if (user_headlink) {
    set_has_user_headlink();
    user_headlink_ = user_headlink;
  } else {
    clear_has_user_headlink();
    user_headlink_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.RefuseAddFrienInfo.user_headlink)
}

// optional uint32 user_gender = 8;
inline bool RefuseAddFrienInfo::has_user_gender() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RefuseAddFrienInfo::set_has_user_gender() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RefuseAddFrienInfo::clear_has_user_gender() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RefuseAddFrienInfo::clear_user_gender() {
  user_gender_ = 0u;
  clear_has_user_gender();
}
inline ::google::protobuf::uint32 RefuseAddFrienInfo::user_gender() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.RefuseAddFrienInfo.user_gender)
  return user_gender_;
}
inline void RefuseAddFrienInfo::set_user_gender(::google::protobuf::uint32 value) {
  set_has_user_gender();
  user_gender_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.RefuseAddFrienInfo.user_gender)
}

// optional uint32 user_uid = 9;
inline bool RefuseAddFrienInfo::has_user_uid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RefuseAddFrienInfo::set_has_user_uid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RefuseAddFrienInfo::clear_has_user_uid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RefuseAddFrienInfo::clear_user_uid() {
  user_uid_ = 0u;
  clear_has_user_uid();
}
inline ::google::protobuf::uint32 RefuseAddFrienInfo::user_uid() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.RefuseAddFrienInfo.user_uid)
  return user_uid_;
}
inline void RefuseAddFrienInfo::set_user_uid(::google::protobuf::uint32 value) {
  set_has_user_uid();
  user_uid_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.RefuseAddFrienInfo.user_uid)
}

// -------------------------------------------------------------------

// AgreeAddFrienInfo

// required uint32 agree_user_id = 1;
inline bool AgreeAddFrienInfo::has_agree_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AgreeAddFrienInfo::set_has_agree_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AgreeAddFrienInfo::clear_has_agree_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AgreeAddFrienInfo::clear_agree_user_id() {
  agree_user_id_ = 0u;
  clear_has_agree_user_id();
}
inline ::google::protobuf::uint32 AgreeAddFrienInfo::agree_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.AgreeAddFrienInfo.agree_user_id)
  return agree_user_id_;
}
inline void AgreeAddFrienInfo::set_agree_user_id(::google::protobuf::uint32 value) {
  set_has_agree_user_id();
  agree_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.AgreeAddFrienInfo.agree_user_id)
}

// required uint32 resp_time = 2;
inline bool AgreeAddFrienInfo::has_resp_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AgreeAddFrienInfo::set_has_resp_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AgreeAddFrienInfo::clear_has_resp_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AgreeAddFrienInfo::clear_resp_time() {
  resp_time_ = 0u;
  clear_has_resp_time();
}
inline ::google::protobuf::uint32 AgreeAddFrienInfo::resp_time() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.AgreeAddFrienInfo.resp_time)
  return resp_time_;
}
inline void AgreeAddFrienInfo::set_resp_time(::google::protobuf::uint32 value) {
  set_has_resp_time();
  resp_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.AgreeAddFrienInfo.resp_time)
}

// optional string user_nickname = 6;
inline bool AgreeAddFrienInfo::has_user_nickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AgreeAddFrienInfo::set_has_user_nickname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AgreeAddFrienInfo::clear_has_user_nickname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AgreeAddFrienInfo::clear_user_nickname() {
  if (user_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_->clear();
  }
  clear_has_user_nickname();
}
inline const ::std::string& AgreeAddFrienInfo::user_nickname() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.AgreeAddFrienInfo.user_nickname)
  return *user_nickname_;
}
inline void AgreeAddFrienInfo::set_user_nickname(const ::std::string& value) {
  set_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_ = new ::std::string;
  }
  user_nickname_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.AgreeAddFrienInfo.user_nickname)
}
inline void AgreeAddFrienInfo::set_user_nickname(const char* value) {
  set_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_ = new ::std::string;
  }
  user_nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.AgreeAddFrienInfo.user_nickname)
}
inline void AgreeAddFrienInfo::set_user_nickname(const char* value, size_t size) {
  set_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_ = new ::std::string;
  }
  user_nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.AgreeAddFrienInfo.user_nickname)
}
inline ::std::string* AgreeAddFrienInfo::mutable_user_nickname() {
  set_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.AgreeAddFrienInfo.user_nickname)
  return user_nickname_;
}
inline ::std::string* AgreeAddFrienInfo::release_user_nickname() {
  clear_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_nickname_;
    user_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AgreeAddFrienInfo::set_allocated_user_nickname(::std::string* user_nickname) {
  if (user_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_nickname_;
  }
  if (user_nickname) {
    set_has_user_nickname();
    user_nickname_ = user_nickname;
  } else {
    clear_has_user_nickname();
    user_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.AgreeAddFrienInfo.user_nickname)
}

// optional string user_headlink = 7;
inline bool AgreeAddFrienInfo::has_user_headlink() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AgreeAddFrienInfo::set_has_user_headlink() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AgreeAddFrienInfo::clear_has_user_headlink() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AgreeAddFrienInfo::clear_user_headlink() {
  if (user_headlink_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_headlink_->clear();
  }
  clear_has_user_headlink();
}
inline const ::std::string& AgreeAddFrienInfo::user_headlink() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.AgreeAddFrienInfo.user_headlink)
  return *user_headlink_;
}
inline void AgreeAddFrienInfo::set_user_headlink(const ::std::string& value) {
  set_has_user_headlink();
  if (user_headlink_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_headlink_ = new ::std::string;
  }
  user_headlink_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.AgreeAddFrienInfo.user_headlink)
}
inline void AgreeAddFrienInfo::set_user_headlink(const char* value) {
  set_has_user_headlink();
  if (user_headlink_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_headlink_ = new ::std::string;
  }
  user_headlink_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.AgreeAddFrienInfo.user_headlink)
}
inline void AgreeAddFrienInfo::set_user_headlink(const char* value, size_t size) {
  set_has_user_headlink();
  if (user_headlink_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_headlink_ = new ::std::string;
  }
  user_headlink_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.AgreeAddFrienInfo.user_headlink)
}
inline ::std::string* AgreeAddFrienInfo::mutable_user_headlink() {
  set_has_user_headlink();
  if (user_headlink_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_headlink_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.AgreeAddFrienInfo.user_headlink)
  return user_headlink_;
}
inline ::std::string* AgreeAddFrienInfo::release_user_headlink() {
  clear_has_user_headlink();
  if (user_headlink_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_headlink_;
    user_headlink_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AgreeAddFrienInfo::set_allocated_user_headlink(::std::string* user_headlink) {
  if (user_headlink_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_headlink_;
  }
  if (user_headlink) {
    set_has_user_headlink();
    user_headlink_ = user_headlink;
  } else {
    clear_has_user_headlink();
    user_headlink_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.AgreeAddFrienInfo.user_headlink)
}

// optional uint32 user_gender = 8;
inline bool AgreeAddFrienInfo::has_user_gender() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AgreeAddFrienInfo::set_has_user_gender() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AgreeAddFrienInfo::clear_has_user_gender() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AgreeAddFrienInfo::clear_user_gender() {
  user_gender_ = 0u;
  clear_has_user_gender();
}
inline ::google::protobuf::uint32 AgreeAddFrienInfo::user_gender() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.AgreeAddFrienInfo.user_gender)
  return user_gender_;
}
inline void AgreeAddFrienInfo::set_user_gender(::google::protobuf::uint32 value) {
  set_has_user_gender();
  user_gender_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.AgreeAddFrienInfo.user_gender)
}

// optional uint32 user_uid = 9;
inline bool AgreeAddFrienInfo::has_user_uid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AgreeAddFrienInfo::set_has_user_uid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AgreeAddFrienInfo::clear_has_user_uid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AgreeAddFrienInfo::clear_user_uid() {
  user_uid_ = 0u;
  clear_has_user_uid();
}
inline ::google::protobuf::uint32 AgreeAddFrienInfo::user_uid() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.AgreeAddFrienInfo.user_uid)
  return user_uid_;
}
inline void AgreeAddFrienInfo::set_user_uid(::google::protobuf::uint32 value) {
  set_has_user_uid();
  user_uid_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.AgreeAddFrienInfo.user_uid)
}

// -------------------------------------------------------------------

// IMGetAddFriendRes

// required uint32 user_id = 1;
inline bool IMGetAddFriendRes::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGetAddFriendRes::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGetAddFriendRes::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGetAddFriendRes::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMGetAddFriendRes::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMGetAddFriendRes.user_id)
  return user_id_;
}
inline void IMGetAddFriendRes::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMGetAddFriendRes.user_id)
}

// repeated .IM.Buddy.AddFrienInfo addfriend_info_list = 2;
inline int IMGetAddFriendRes::addfriend_info_list_size() const {
  return addfriend_info_list_.size();
}
inline void IMGetAddFriendRes::clear_addfriend_info_list() {
  addfriend_info_list_.Clear();
}
inline const ::IM::Buddy::AddFrienInfo& IMGetAddFriendRes::addfriend_info_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMGetAddFriendRes.addfriend_info_list)
  return addfriend_info_list_.Get(index);
}
inline ::IM::Buddy::AddFrienInfo* IMGetAddFriendRes::mutable_addfriend_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMGetAddFriendRes.addfriend_info_list)
  return addfriend_info_list_.Mutable(index);
}
inline ::IM::Buddy::AddFrienInfo* IMGetAddFriendRes::add_addfriend_info_list() {
  // @@protoc_insertion_point(field_add:IM.Buddy.IMGetAddFriendRes.addfriend_info_list)
  return addfriend_info_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::Buddy::AddFrienInfo >&
IMGetAddFriendRes::addfriend_info_list() const {
  // @@protoc_insertion_point(field_list:IM.Buddy.IMGetAddFriendRes.addfriend_info_list)
  return addfriend_info_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::Buddy::AddFrienInfo >*
IMGetAddFriendRes::mutable_addfriend_info_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Buddy.IMGetAddFriendRes.addfriend_info_list)
  return &addfriend_info_list_;
}

// repeated .IM.Buddy.AgreeAddFrienInfo agree_info_list = 3;
inline int IMGetAddFriendRes::agree_info_list_size() const {
  return agree_info_list_.size();
}
inline void IMGetAddFriendRes::clear_agree_info_list() {
  agree_info_list_.Clear();
}
inline const ::IM::Buddy::AgreeAddFrienInfo& IMGetAddFriendRes::agree_info_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMGetAddFriendRes.agree_info_list)
  return agree_info_list_.Get(index);
}
inline ::IM::Buddy::AgreeAddFrienInfo* IMGetAddFriendRes::mutable_agree_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMGetAddFriendRes.agree_info_list)
  return agree_info_list_.Mutable(index);
}
inline ::IM::Buddy::AgreeAddFrienInfo* IMGetAddFriendRes::add_agree_info_list() {
  // @@protoc_insertion_point(field_add:IM.Buddy.IMGetAddFriendRes.agree_info_list)
  return agree_info_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::Buddy::AgreeAddFrienInfo >&
IMGetAddFriendRes::agree_info_list() const {
  // @@protoc_insertion_point(field_list:IM.Buddy.IMGetAddFriendRes.agree_info_list)
  return agree_info_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::Buddy::AgreeAddFrienInfo >*
IMGetAddFriendRes::mutable_agree_info_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Buddy.IMGetAddFriendRes.agree_info_list)
  return &agree_info_list_;
}

// repeated .IM.Buddy.RefuseAddFrienInfo refuse_info_list = 4;
inline int IMGetAddFriendRes::refuse_info_list_size() const {
  return refuse_info_list_.size();
}
inline void IMGetAddFriendRes::clear_refuse_info_list() {
  refuse_info_list_.Clear();
}
inline const ::IM::Buddy::RefuseAddFrienInfo& IMGetAddFriendRes::refuse_info_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMGetAddFriendRes.refuse_info_list)
  return refuse_info_list_.Get(index);
}
inline ::IM::Buddy::RefuseAddFrienInfo* IMGetAddFriendRes::mutable_refuse_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMGetAddFriendRes.refuse_info_list)
  return refuse_info_list_.Mutable(index);
}
inline ::IM::Buddy::RefuseAddFrienInfo* IMGetAddFriendRes::add_refuse_info_list() {
  // @@protoc_insertion_point(field_add:IM.Buddy.IMGetAddFriendRes.refuse_info_list)
  return refuse_info_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::Buddy::RefuseAddFrienInfo >&
IMGetAddFriendRes::refuse_info_list() const {
  // @@protoc_insertion_point(field_list:IM.Buddy.IMGetAddFriendRes.refuse_info_list)
  return refuse_info_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::Buddy::RefuseAddFrienInfo >*
IMGetAddFriendRes::mutable_refuse_info_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Buddy.IMGetAddFriendRes.refuse_info_list)
  return &refuse_info_list_;
}

// optional bytes attach_data = 20;
inline bool IMGetAddFriendRes::has_attach_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGetAddFriendRes::set_has_attach_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGetAddFriendRes::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGetAddFriendRes::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGetAddFriendRes::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMGetAddFriendRes.attach_data)
  return *attach_data_;
}
inline void IMGetAddFriendRes::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMGetAddFriendRes.attach_data)
}
inline void IMGetAddFriendRes::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMGetAddFriendRes.attach_data)
}
inline void IMGetAddFriendRes::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMGetAddFriendRes.attach_data)
}
inline ::std::string* IMGetAddFriendRes::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMGetAddFriendRes.attach_data)
  return attach_data_;
}
inline ::std::string* IMGetAddFriendRes::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGetAddFriendRes::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMGetAddFriendRes.attach_data)
}

// -------------------------------------------------------------------

// IMFindUserInfoReq

// required uint32 user_id = 1;
inline bool IMFindUserInfoReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMFindUserInfoReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMFindUserInfoReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMFindUserInfoReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMFindUserInfoReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMFindUserInfoReq.user_id)
  return user_id_;
}
inline void IMFindUserInfoReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMFindUserInfoReq.user_id)
}

// required string find_string = 2;
inline bool IMFindUserInfoReq::has_find_string() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMFindUserInfoReq::set_has_find_string() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMFindUserInfoReq::clear_has_find_string() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMFindUserInfoReq::clear_find_string() {
  if (find_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    find_string_->clear();
  }
  clear_has_find_string();
}
inline const ::std::string& IMFindUserInfoReq::find_string() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMFindUserInfoReq.find_string)
  return *find_string_;
}
inline void IMFindUserInfoReq::set_find_string(const ::std::string& value) {
  set_has_find_string();
  if (find_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    find_string_ = new ::std::string;
  }
  find_string_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMFindUserInfoReq.find_string)
}
inline void IMFindUserInfoReq::set_find_string(const char* value) {
  set_has_find_string();
  if (find_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    find_string_ = new ::std::string;
  }
  find_string_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMFindUserInfoReq.find_string)
}
inline void IMFindUserInfoReq::set_find_string(const char* value, size_t size) {
  set_has_find_string();
  if (find_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    find_string_ = new ::std::string;
  }
  find_string_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMFindUserInfoReq.find_string)
}
inline ::std::string* IMFindUserInfoReq::mutable_find_string() {
  set_has_find_string();
  if (find_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    find_string_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMFindUserInfoReq.find_string)
  return find_string_;
}
inline ::std::string* IMFindUserInfoReq::release_find_string() {
  clear_has_find_string();
  if (find_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = find_string_;
    find_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMFindUserInfoReq::set_allocated_find_string(::std::string* find_string) {
  if (find_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete find_string_;
  }
  if (find_string) {
    set_has_find_string();
    find_string_ = find_string;
  } else {
    clear_has_find_string();
    find_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMFindUserInfoReq.find_string)
}

// optional bytes attach_data = 20;
inline bool IMFindUserInfoReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMFindUserInfoReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMFindUserInfoReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMFindUserInfoReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMFindUserInfoReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMFindUserInfoReq.attach_data)
  return *attach_data_;
}
inline void IMFindUserInfoReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMFindUserInfoReq.attach_data)
}
inline void IMFindUserInfoReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMFindUserInfoReq.attach_data)
}
inline void IMFindUserInfoReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMFindUserInfoReq.attach_data)
}
inline ::std::string* IMFindUserInfoReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMFindUserInfoReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMFindUserInfoReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMFindUserInfoReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMFindUserInfoReq.attach_data)
}

// -------------------------------------------------------------------

// IMFindUserInfoRes

// required uint32 user_id = 1;
inline bool IMFindUserInfoRes::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMFindUserInfoRes::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMFindUserInfoRes::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMFindUserInfoRes::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMFindUserInfoRes::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMFindUserInfoRes.user_id)
  return user_id_;
}
inline void IMFindUserInfoRes::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMFindUserInfoRes.user_id)
}

// repeated .IM.BaseDefine.UserInfo userinfo_list = 2;
inline int IMFindUserInfoRes::userinfo_list_size() const {
  return userinfo_list_.size();
}
inline void IMFindUserInfoRes::clear_userinfo_list() {
  userinfo_list_.Clear();
}
inline const ::IM::BaseDefine::UserInfo& IMFindUserInfoRes::userinfo_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMFindUserInfoRes.userinfo_list)
  return userinfo_list_.Get(index);
}
inline ::IM::BaseDefine::UserInfo* IMFindUserInfoRes::mutable_userinfo_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMFindUserInfoRes.userinfo_list)
  return userinfo_list_.Mutable(index);
}
inline ::IM::BaseDefine::UserInfo* IMFindUserInfoRes::add_userinfo_list() {
  // @@protoc_insertion_point(field_add:IM.Buddy.IMFindUserInfoRes.userinfo_list)
  return userinfo_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserInfo >&
IMFindUserInfoRes::userinfo_list() const {
  // @@protoc_insertion_point(field_list:IM.Buddy.IMFindUserInfoRes.userinfo_list)
  return userinfo_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserInfo >*
IMFindUserInfoRes::mutable_userinfo_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Buddy.IMFindUserInfoRes.userinfo_list)
  return &userinfo_list_;
}

// optional bytes attach_data = 20;
inline bool IMFindUserInfoRes::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMFindUserInfoRes::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMFindUserInfoRes::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMFindUserInfoRes::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMFindUserInfoRes::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMFindUserInfoRes.attach_data)
  return *attach_data_;
}
inline void IMFindUserInfoRes::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMFindUserInfoRes.attach_data)
}
inline void IMFindUserInfoRes::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMFindUserInfoRes.attach_data)
}
inline void IMFindUserInfoRes::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMFindUserInfoRes.attach_data)
}
inline ::std::string* IMFindUserInfoRes::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMFindUserInfoRes.attach_data)
  return attach_data_;
}
inline ::std::string* IMFindUserInfoRes::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMFindUserInfoRes::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMFindUserInfoRes.attach_data)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Buddy
}  // namespace IM

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_IM_2eBuddy_2eproto__INCLUDED
